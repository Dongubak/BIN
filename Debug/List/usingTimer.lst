
AVRASM ver. 2.1.30  C:\cvavreval\BIN\Debug\List\usingTimer.asm Fri May 31 14:44:44 2024

C:\cvavreval\BIN\Debug\List\usingTimer.asm(1421): warning: Register r3 already defined by the .DEF directive
C:\cvavreval\BIN\Debug\List\usingTimer.asm(1422): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V4.02 Evaluation
                 ;(C) Copyright 1998-2024 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _interruptFlag=R3
                 	.DEF _interruptFlag_msb=R4
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0163 	JMP  __RESET
000002 940c 0192 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000034 2710
000035 03e8
000036 0064
000037 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000038 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000039 1000
00003a 0100
00003b 0010
00003c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00003d 0000      	.DB  0x0,0x0
                 
                 _0x0:
00003e 6564
00003f 6574
000040 7463
000041 6920      	.DB  0x64,0x65,0x74,0x65,0x63,0x74,0x20,0x69
000042 746e
000043 7265
000044 7572
000045 7470      	.DB  0x6E,0x74,0x65,0x72,0x72,0x75,0x70,0x74
000046 0d0a
000047 5600
000048 6c6f
000049 6174      	.DB  0xA,0xD,0x0,0x56,0x6F,0x6C,0x74,0x61
00004a 6567
00004b 6920
00004c 2073
00004d 6425      	.DB  0x67,0x65,0x20,0x69,0x73,0x20,0x25,0x64
00004e 252e
00004f 0a64
000050 000d
000051 7563      	.DB  0x2E,0x25,0x64,0xA,0xD,0x0,0x63,0x75
000052 7272
000053 6e65
000054 5474
000055 6d65      	.DB  0x72,0x72,0x65,0x6E,0x74,0x54,0x65,0x6D
000056 6570
000057 6172
000058 7574
000059 6572      	.DB  0x70,0x65,0x72,0x61,0x74,0x75,0x72,0x65
00005a 6e49
00005b 6f56
00005c 746c
00005d 6761      	.DB  0x49,0x6E,0x56,0x6F,0x6C,0x74,0x61,0x67
00005e 2065
00005f 203a
000060 6425
000061 0d0a      	.DB  0x65,0x20,0x3A,0x20,0x25,0x64,0xA,0xD
000062 6300
000063 7275
000064 6572
000065 746e      	.DB  0x0,0x63,0x75,0x72,0x72,0x65,0x6E,0x74
000066 7420
000067 6d65
000068 2070
000069 7369      	.DB  0x20,0x74,0x65,0x6D,0x70,0x20,0x69,0x73
00006a 2520
00006b 0a64
00006c 000d
00006d 2d2d      	.DB  0x20,0x25,0x64,0xA,0xD,0x0,0x2D,0x2D
00006e 2d2d
00006f 2d2d
000070 2d2d
000071 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000072 2d2d
000073 2d2d
000074 2d2d
000075 732d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x73
000076 6174
000077 7472
000078 6920
000079 706e      	.DB  0x74,0x61,0x72,0x74,0x20,0x69,0x6E,0x70
00007a 7475
00007b 2d2d
00007c 2d2d
00007d 2d2d      	.DB  0x75,0x74,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00007e 2d2d
00007f 2d2d
000080 2d2d
000081 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000082 2d2d
000083 0a0a
000084 0d0a
000085 6500      	.DB  0x2D,0x2D,0xA,0xA,0xA,0xD,0x0,0x65
000086 746e
000087 7265
000088 7420
000089 6568      	.DB  0x6E,0x74,0x65,0x72,0x20,0x74,0x68,0x65
00008a 6d20
00008b 646f
00008c 2c65
00008d 7120      	.DB  0x20,0x6D,0x6F,0x64,0x65,0x2C,0x20,0x71
00008e 6975
00008f 2874
000090 2971
000091 3a20      	.DB  0x75,0x69,0x74,0x28,0x71,0x29,0x20,0x3A
000092 0a20
000093 000d
000094 6425
000095 6500      	.DB  0x20,0xA,0xD,0x0,0x25,0x64,0x0,0x65
000096 746e
000097 7265
000098 7420
000099 6568      	.DB  0x6E,0x74,0x65,0x72,0x20,0x74,0x68,0x65
00009a 6d20
00009b 646f
00009c 2065
00009d 3128      	.DB  0x20,0x6D,0x6F,0x64,0x65,0x20,0x28,0x31
00009e 7e20
00009f 3420
0000a0 2029
0000a1 203a      	.DB  0x20,0x7E,0x20,0x34,0x29,0x20,0x3A,0x20
0000a2 0d0a
0000a3 0a00
0000a4 0a0a
0000a5 2d2d      	.DB  0xA,0xD,0x0,0xA,0xA,0xA,0x2D,0x2D
0000a6 2d2d
0000a7 2d2d
0000a8 2d2d
0000a9 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
0000aa 2d2d
0000ab 2d2d
0000ac 6e65
0000ad 2064      	.DB  0x2D,0x2D,0x2D,0x2D,0x65,0x6E,0x64,0x20
0000ae 6e69
0000af 7570
0000b0 2d74
0000b1 2d2d      	.DB  0x69,0x6E,0x70,0x75,0x74,0x2D,0x2D,0x2D
0000b2 2d2d
0000b3 2d2d
0000b4 2d2d
0000b5 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
0000b6 2d2d
0000b7 0a2d
0000b8 000d
0000b9 2d2d      	.DB  0x2D,0x2D,0x2D,0xA,0xD,0x0,0x2D,0x2D
0000ba 2d2d
0000bb 2d2d
0000bc 2d2d
0000bd 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
0000be 2d2d
0000bf 2d2d
0000c0 7473
0000c1 7261      	.DB  0x2D,0x2D,0x2D,0x2D,0x73,0x74,0x61,0x72
0000c2 2074
0000c3 6f6d
0000c4 6564
0000c5 2d31      	.DB  0x74,0x20,0x6D,0x6F,0x64,0x65,0x31,0x2D
0000c6 2d2d
0000c7 2d2d
0000c8 2d2d
0000c9 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
0000ca 2d2d
0000cb 2d2d
0000cc 0a2d
0000cd 0a0a      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0xA,0xA,0xA
0000ce 000d
0000cf 6e65
0000d0 6574
0000d1 2072      	.DB  0xD,0x0,0x65,0x6E,0x74,0x65,0x72,0x20
0000d2 6874
0000d3 2065
0000d4 6f63
0000d5 6e75      	.DB  0x74,0x68,0x65,0x20,0x63,0x6F,0x75,0x6E
0000d6 2074
0000d7 6f66
0000d8 2072
0000d9 6c62      	.DB  0x74,0x20,0x66,0x6F,0x72,0x20,0x62,0x6C
0000da 6e69
0000db 696b
0000dc 676e
0000dd 4c20      	.DB  0x69,0x6E,0x6B,0x69,0x6E,0x67,0x20,0x4C
0000de 4445
0000df 202c
0000e0 7571
0000e1 7469      	.DB  0x45,0x44,0x2C,0x20,0x71,0x75,0x69,0x74
0000e2 7128
0000e3 2029
0000e4 203a
0000e5 0d0a      	.DB  0x28,0x71,0x29,0x20,0x3A,0x20,0xA,0xD
0000e6 0a00
0000e7 0a0a
0000e8 2d2d
0000e9 2d2d      	.DB  0x0,0xA,0xA,0xA,0x2D,0x2D,0x2D,0x2D
0000ea 2d2d
0000eb 2d2d
0000ec 2d2d
0000ed 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
0000ee 2d2d
0000ef 6520
0000f0 646e
0000f1 6d20      	.DB  0x2D,0x2D,0x20,0x65,0x6E,0x64,0x20,0x6D
0000f2 646f
0000f3 3165
0000f4 2d20
0000f5 2d2d      	.DB  0x6F,0x64,0x65,0x31,0x20,0x2D,0x2D,0x2D
0000f6 2d2d
0000f7 2d2d
0000f8 2d2d
0000f9 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
0000fa 2d2d
0000fb 0a2d
0000fc 0a0a
0000fd 000d      	.DB  0x2D,0x2D,0x2D,0xA,0xA,0xA,0xD,0x0
0000fe 2d2d
0000ff 2d2d
000100 2d2d
000101 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000102 2d2d
000103 2d2d
000104 2d2d
000105 7473      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x73,0x74
000106 7261
000107 2074
000108 6f6d
000109 6564      	.DB  0x61,0x72,0x74,0x20,0x6D,0x6F,0x64,0x65
00010a 2d32
00010b 2d2d
00010c 2d2d
00010d 2d2d      	.DB  0x32,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00010e 2d2d
00010f 2d2d
000110 2d2d
000111 0a2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xA
000112 0a0a
000113 000d
000114 6e65
000115 6574      	.DB  0xA,0xA,0xD,0x0,0x65,0x6E,0x74,0x65
000116 2072
000117 6874
000118 2065
000119 6f63      	.DB  0x72,0x20,0x74,0x68,0x65,0x20,0x63,0x6F
00011a 6e75
00011b 2074
00011c 6f66
00011d 2072      	.DB  0x75,0x6E,0x74,0x20,0x66,0x6F,0x72,0x20
00011e 656d
00011f 7361
000120 7275
000121 6e69      	.DB  0x6D,0x65,0x61,0x73,0x75,0x72,0x69,0x6E
000122 2067
000123 6574
000124 706d
000125 7265      	.DB  0x67,0x20,0x74,0x65,0x6D,0x70,0x65,0x72
000126 7461
000127 7275
000128 2c65
000129 7120      	.DB  0x61,0x74,0x75,0x72,0x65,0x2C,0x20,0x71
00012a 6975
00012b 2874
00012c 2971
00012d 3a20      	.DB  0x75,0x69,0x74,0x28,0x71,0x29,0x20,0x3A
00012e 0a20
00012f 000d
000130 7661
000131 7265      	.DB  0x20,0xA,0xD,0x0,0x61,0x76,0x65,0x72
000132 6761
000133 2065
000134 666f
000135 7420      	.DB  0x61,0x67,0x65,0x20,0x6F,0x66,0x20,0x74
000136 6d65
000137 6570
000138 6172
000139 7574      	.DB  0x65,0x6D,0x70,0x65,0x72,0x61,0x74,0x75
00013a 6572
00013b 2073
00013c 203a
00013d 6425      	.DB  0x72,0x65,0x73,0x20,0x3A,0x20,0x25,0x64
00013e 0d0a
00013f 0a00
000140 0a0a
000141 2d2d      	.DB  0xA,0xD,0x0,0xA,0xA,0xA,0x2D,0x2D
000142 2d2d
000143 2d2d
000144 2d2d
000145 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000146 2d2d
000147 2d2d
000148 6520
000149 646e      	.DB  0x2D,0x2D,0x2D,0x2D,0x20,0x65,0x6E,0x64
00014a 6d20
00014b 646f
00014c 3265
00014d 2d20      	.DB  0x20,0x6D,0x6F,0x64,0x65,0x32,0x20,0x2D
00014e 2d2d
00014f 2d2d
000150 2d2d
000151 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000152 2d2d
000153 2d2d
000154 0a2d
000155 0a0a      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0xA,0xA,0xA
000156 000d
000157 6574
000158 706d
000159 2520      	.DB  0xD,0x0,0x74,0x65,0x6D,0x70,0x20,0x25
00015a 2064
00015b 203a
00015c 6425
00015d 0d0a      	.DB  0x64,0x20,0x3A,0x20,0x25,0x64,0xA,0xD
C:\cvavreval\BIN\Debug\List\usingTimer.asm(1544): warning: .cseg .db misalignment - padding zero byte
00015e 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00015f 0002      	.DW  0x02
000160 0003      	.DW  0x03
000161 007a      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000162 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000163 94f8      	CLI
                 
000164 27ee      	CLR  R30
000165 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000166 e0f1      	LDI  R31,1
000167 bff5      	OUT  MCUCR,R31
000168 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000169 e08d      	LDI  R24,(14-2)+1
00016a e0a2      	LDI  R26,2
00016b 27bb      	CLR  R27
                 __CLEAR_REG:
00016c 93ed      	ST   X+,R30
00016d 958a      	DEC  R24
00016e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00016f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000170 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000171 e0a0      	LDI  R26,LOW(__SRAM_START)
000172 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000173 93ed      	ST   X+,R30
000174 9701      	SBIW R24,1
000175 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000176 ebee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000177 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000178 9185      	LPM  R24,Z+
000179 9195      	LPM  R25,Z+
00017a 9700      	SBIW R24,0
00017b f061      	BREQ __GLOBAL_INI_END
00017c 91a5      	LPM  R26,Z+
00017d 91b5      	LPM  R27,Z+
00017e 9005      	LPM  R0,Z+
00017f 9015      	LPM  R1,Z+
000180 01bf      	MOVW R22,R30
000181 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000182 9005      	LPM  R0,Z+
000183 920d      	ST   X+,R0
000184 9701      	SBIW R24,1
000185 f7e1      	BRNE __GLOBAL_INI_LOOP
000186 01fb      	MOVW R30,R22
000187 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000188 e0e0      	LDI  R30,__GPIOR0_INIT
000189 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00018a efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00018b bfed      	OUT  SPL,R30
00018c e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00018d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00018e e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00018f e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000190 940c 0349 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;interrupt [2] void ext_int0_isr(void) {
                 ; 0000 0006 interrupt [2] void ext_int0_isr(void) {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000192 920a      	ST   -Y,R0
000193 921a      	ST   -Y,R1
000194 92fa      	ST   -Y,R15
000195 936a      	ST   -Y,R22
000196 937a      	ST   -Y,R23
000197 938a      	ST   -Y,R24
000198 939a      	ST   -Y,R25
000199 93aa      	ST   -Y,R26
00019a 93ba      	ST   -Y,R27
00019b 93ea      	ST   -Y,R30
00019c 93fa      	ST   -Y,R31
00019d b7ef      	IN   R30,SREG
00019e 93ea      	ST   -Y,R30
                 ; 0000 0007 interruptFlag = 1;
00019f e0e1      	LDI  R30,LOW(1)
0001a0 e0f0      	LDI  R31,HIGH(1)
                +
0001a1 2e3e     +MOV R3 , R30
0001a2 2e4f     +MOV R4 , R31
                 	__PUTW1R 3,4
                 ; 0000 0008 // Place your code here
                 ; 0000 0009 printf("detect interrupt\n\r");
                +
0001a3 e7ec     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001a4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001a5 d4e2      	RCALL SUBOPT_0x0
                 ; 0000 000A 
                 ; 0000 000B }
0001a6 91e9      	LD   R30,Y+
0001a7 bfef      	OUT  SREG,R30
0001a8 91f9      	LD   R31,Y+
0001a9 91e9      	LD   R30,Y+
0001aa 91b9      	LD   R27,Y+
0001ab 91a9      	LD   R26,Y+
0001ac 9199      	LD   R25,Y+
0001ad 9189      	LD   R24,Y+
0001ae 9179      	LD   R23,Y+
0001af 9169      	LD   R22,Y+
0001b0 90f9      	LD   R15,Y+
0001b1 9019      	LD   R1,Y+
0001b2 9009      	LD   R0,Y+
0001b3 9518      	RETI
                 ; .FEND
                 ;unsigned int mearsureVoltage(unsigned char adc_input) {
                 ; 0000 0013 unsigned int mearsureVoltage(unsigned char adc_input) {
                 _mearsureVoltage:
                 ; .FSTART _mearsureVoltage
                 ; 0000 0014 float adc_voltage;
                 ; 0000 0015 
                 ; 0000 0016 adc_input &= 0b00000111;
0001b4 9724      	SBIW R28,4
0001b5 931a      	ST   -Y,R17
0001b6 2f1a      	MOV  R17,R26
                 ;	adc_input -> R17
                 ;	adc_voltage -> Y+1
0001b7 7017      	ANDI R17,LOW(7)
                 ; 0000 0017 ADMUX = (1 << REFS0);
0001b8 e4e0      	LDI  R30,LOW(64)
0001b9 93e0 007c 	STS  124,R30
                 ; 0000 0018 ADMUX = (ADMUX & 0xF8) | adc_input;
0001bb 91e0 007c 	LDS  R30,124
0001bd 7fe8      	ANDI R30,LOW(0xF8)
0001be 2be1      	OR   R30,R17
0001bf d4ce      	RCALL SUBOPT_0x1
                 ; 0000 0019 
                 ; 0000 001A delay_us(10);
                 ; 0000 001B 
                 ; 0000 001C // Start the AD conversion
                 ; 0000 001D ADCSRA|=(1<<ADSC);
                 ; 0000 001E // Wait for the AD conversion to complete
                 ; 0000 001F while ((ADCSRA & (1<<ADSC))==0);
                 _0x3:
0001c0 91e0 007a 	LDS  R30,122
0001c2 74e0      	ANDI R30,LOW(0x40)
0001c3 f3e1      	BREQ _0x3
                 ; 0000 0020 
                 ; 0000 0021 adc_voltage = ((unsigned int)ADCW/1024.0) * 5.0 * 100.0;
0001c4 d4d4      	RCALL SUBOPT_0x2
                +
0001c5 e0a0     +LDI R26 , LOW ( 0x40A00000 )
0001c6 e0b0     +LDI R27 , HIGH ( 0x40A00000 )
0001c7 ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
0001c8 e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
0001c9 d6c7      	RCALL __MULF12
                +
0001ca e0a0     +LDI R26 , LOW ( 0x42C80000 )
0001cb e0b0     +LDI R27 , HIGH ( 0x42C80000 )
0001cc ec88     +LDI R24 , BYTE3 ( 0x42C80000 )
0001cd e492     +LDI R25 , BYTE4 ( 0x42C80000 )
                 	__GETD2N 0x42C80000
0001ce d6c2      	RCALL __MULF12
                +
0001cf 83e9     +STD Y + 1 , R30
0001d0 83fa     +STD Y + 1 + 1 , R31
0001d1 836b     +STD Y + 1 + 2 , R22
0001d2 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0000 0022 printf("Voltage is %d.%d\n\r", (int)adc_voltage / 100, (int)adc_voltage % 100);
                +
0001d3 e8ef     +LDI R30 , LOW ( 2 * _0x0 + ( 19 ) )
0001d4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 19 ) )
                 	__POINTW1FN _0x0,19
0001d5 93fa      	ST   -Y,R31
0001d6 93ea      	ST   -Y,R30
                +
0001d7 81eb     +LDD R30 , Y + 3
0001d8 81fc     +LDD R31 , Y + 3 + 1
0001d9 816d     +LDD R22 , Y + 3 + 2
0001da 817e     +LDD R23 , Y + 3 + 3
                 	__GETD1S 3
0001db d4cc      	RCALL SUBOPT_0x3
0001dc d4d0      	RCALL SUBOPT_0x4
                +
0001dd 81ef     +LDD R30 , Y + 7
0001de 85f8     +LDD R31 , Y + 7 + 1
0001df 8569     +LDD R22 , Y + 7 + 2
0001e0 857a     +LDD R23 , Y + 7 + 3
                 	__GETD1S 7
0001e1 d4c6      	RCALL SUBOPT_0x3
0001e2 d590      	RCALL __MODW21
0001e3 d4d0      	RCALL SUBOPT_0x5
0001e4 e088      	LDI  R24,8
0001e5 d2f6      	RCALL _printf
0001e6 962a      	ADIW R28,10
                 ; 0000 0023 return adc_voltage;
                +
0001e7 81e9     +LDD R30 , Y + 1
0001e8 81fa     +LDD R31 , Y + 1 + 1
0001e9 816b     +LDD R22 , Y + 1 + 2
0001ea 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
0001eb d5e8      	RCALL __CFD1U
0001ec 8118      	LDD  R17,Y+0
0001ed c1c4      	RJMP _0x2060004
                 ; 0000 0024 }
                 ; .FEND
                 ;void EEPROM_write(unsigned int uiAddress, unsigned char ucData) {
                 ; 0000 0026 void EEPROM_write(unsigned int uiAddress, unsigned char ucData) {
                 _EEPROM_write:
                 ; .FSTART _EEPROM_write
                 ; 0000 0027 /* Wait for completion of previous write */
                 ; 0000 0028 while(EECR & (1<<EEPE));
0001ee d544      	RCALL __SAVELOCR4
0001ef 2f1a      	MOV  R17,R26
                +
0001f0 812c     +LDD R18 , Y + 4
0001f1 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
                 ;	uiAddress -> R18,R19
                 ;	ucData -> R17
                 _0x6:
0001f2 99f9      	SBIC 0x1F,1
0001f3 cffe      	RJMP _0x6
                 ; 0000 0029 /* Set up address and Data Registers */
                 ; 0000 002A EEAR = uiAddress;
                +
0001f4 bd32     +OUT 33 + 1 , R19
0001f5 bd21     +OUT 33 , R18
                 	__OUTWR 18,19,33
                 ; 0000 002B EEDR = ucData;
0001f6 bd10      	OUT  0x20,R17
                 ; 0000 002C /* Write logical one to EEMPE */
                 ; 0000 002D EECR |= (1<<EEMPE);
0001f7 9afa      	SBI  0x1F,2
                 ; 0000 002E /* Start eeprom write by setting EEPE */
                 ; 0000 002F EECR |= (1<<EEPE);
0001f8 9af9      	SBI  0x1F,1
                 ; 0000 0030 }
0001f9 d540      	RCALL __LOADLOCR4
0001fa c14c      	RJMP _0x2060006
                 ; .FEND
                 ;unsigned char EEPROM_read(unsigned int uiAddress)
                 ; 0000 0033 {
                 _EEPROM_read:
                 ; .FSTART _EEPROM_read
                 ; 0000 0034 /* Wait for completion of previous write */
                 ; 0000 0035 while(EECR & (1<<EEPE))
0001fb 931a      	ST   -Y,R17
0001fc 930a      	ST   -Y,R16
0001fd 018d      	MOVW R16,R26
                 ;	uiAddress -> R16,R17
                 _0x9:
0001fe 99f9      	SBIC 0x1F,1
                 ; 0000 0036 ;
0001ff cffe      	RJMP _0x9
                 ; 0000 0037 /* Set up address register */
                 ; 0000 0038 EEAR = uiAddress;
                +
000200 bd12     +OUT 33 + 1 , R17
000201 bd01     +OUT 33 , R16
                 	__OUTWR 16,17,33
                 ; 0000 0039 /* Start eeprom read by writing EERE */
                 ; 0000 003A EECR |= (1<<EERE);
000202 9af8      	SBI  0x1F,0
                 ; 0000 003B /* Return data from Data Register*/
                 ; 0000 003C return EEDR;
000203 b5e0      	IN   R30,0x20
000204 c08c      	RJMP _0x2060007
                 ; 0000 003D }
                 ; .FEND
                 ;int measureTemperature(unsigned char adc_input) {
                 ; 0000 003F int measureTemperature(unsigned char adc_input) {
                 _measureTemperature:
                 ; .FSTART _measureTemperature
                 ; 0000 0040 int currentTemperatureInVoltage, resTemperature;
                 ; 0000 0041 
                 ; 0000 0042 ADMUX=adc_input | ADC_VREF_TYPE_TEMP;
000205 d52b      	RCALL __SAVELOCR6
000206 2f5a      	MOV  R21,R26
                 ;	adc_input -> R21
                 ;	currentTemperatureInVoltage -> R16,R17
                 ;	resTemperature -> R18,R19
000207 2fe5      	MOV  R30,R21
000208 6ce0      	ORI  R30,LOW(0xC0)
000209 d484      	RCALL SUBOPT_0x1
                 ; 0000 0043 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0044 delay_us(10);
                 ; 0000 0045 // Start the AD conversion
                 ; 0000 0046 ADCSRA|=(1<<ADSC);
                 ; 0000 0047 // Wait for the AD conversion to complete
                 ; 0000 0048 while ((ADCSRA & (1<<ADIF))==0);
                 _0xC:
00020a 91e0 007a 	LDS  R30,122
00020c 71e0      	ANDI R30,LOW(0x10)
00020d f3e1      	BREQ _0xC
                 ; 0000 0049 ADCSRA|=(1<<ADIF);
00020e d4ab      	RCALL SUBOPT_0x6
                 ; 0000 004A 
                 ; 0000 004B // Analog Comparator initialization
                 ; 0000 004C // Analog Comparator: Off
                 ; 0000 004D // The Analog Comparator's positive input is
                 ; 0000 004E // connected to the AIN0 pin
                 ; 0000 004F // The Analog Comparator's negative input is
                 ; 0000 0050 // connected to the AIN1 pin
                 ; 0000 0051 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00020f e8e0      	LDI  R30,LOW(128)
000210 d4af      	RCALL SUBOPT_0x7
                 ; 0000 0052 // Digital input buffer on AIN0: On
                 ; 0000 0053 // Digital input buffer on AIN1: On
                 ; 0000 0054 DIDR1=(0<<AIN0D) | (0<<AIN1D);
                 ; 0000 0055 
                 ; 0000 0056 // ADC initialization
                 ; 0000 0057 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0058 // ADC Auto Trigger Source: Software
                 ; 0000 0059 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
                 ; 0000 005A ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
                 ; 0000 005B // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 005C // ADC4: On, ADC5: On
                 ; 0000 005D DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
                 ; 0000 005E 
                 ; 0000 005F 
                 ; 0000 0060 
                 ; 0000 0061 currentTemperatureInVoltage = (int)((ADCW/1024.0) * 1.0002 * 1000);
000211 d487      	RCALL SUBOPT_0x2
                +
000212 e8ae     +LDI R26 , LOW ( 0x3F80068E )
000213 e0b6     +LDI R27 , HIGH ( 0x3F80068E )
000214 e880     +LDI R24 , BYTE3 ( 0x3F80068E )
000215 e39f     +LDI R25 , BYTE4 ( 0x3F80068E )
                 	__GETD2N 0x3F80068E
000216 d67a      	RCALL __MULF12
                +
000217 e0a0     +LDI R26 , LOW ( 0x447A0000 )
000218 e0b0     +LDI R27 , HIGH ( 0x447A0000 )
000219 e78a     +LDI R24 , BYTE3 ( 0x447A0000 )
00021a e494     +LDI R25 , BYTE4 ( 0x447A0000 )
                 	__GETD2N 0x447A0000
00021b d675      	RCALL __MULF12
00021c d5b9      	RCALL __CFD1
00021d 018f      	MOVW R16,R30
                 ; 0000 0062 printf("currentTemperatureInVoltage : %d\n\r", currentTemperatureInVoltage);
                +
00021e eae2     +LDI R30 , LOW ( 2 * _0x0 + ( 38 ) )
00021f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 38 ) )
                 	__POINTW1FN _0x0,38
000220 93fa      	ST   -Y,R31
000221 93ea      	ST   -Y,R30
000222 01f8      	MOVW R30,R16
000223 d490      	RCALL SUBOPT_0x5
000224 e084      	LDI  R24,4
000225 d2b6      	RCALL _printf
000226 9626      	ADIW R28,6
                 ; 0000 0063 
                 ; 0000 0064 resTemperature = 25 - (352 - currentTemperatureInVoltage) / 1.28;
000227 e6e0      	LDI  R30,LOW(352)
000228 e0f1      	LDI  R31,HIGH(352)
000229 1be0      	SUB  R30,R16
00022a 0bf1      	SBC  R31,R17
                +
00022b 2f6f     +MOV R22 , R31
00022c 0f66     +ADD R22 , R22
00022d 0b66     +SBC R22 , R22
00022e 2f76     +MOV R23 , R22
                 	__CWD1
00022f d5dd      	RCALL __CDF1
000230 01df      	MOVW R26,R30
000231 01cb      	MOVW R24,R22
                +
000232 e0ea     +LDI R30 , LOW ( 0x3FA3D70A )
000233 edf7     +LDI R31 , HIGH ( 0x3FA3D70A )
000234 ea63     +LDI R22 , BYTE3 ( 0x3FA3D70A )
000235 e37f     +LDI R23 , BYTE4 ( 0x3FA3D70A )
                 	__GETD1N 0x3FA3D70A
000236 d6a8      	RCALL __DIVF21
                +
000237 e0a0     +LDI R26 , LOW ( 0x41C80000 )
000238 e0b0     +LDI R27 , HIGH ( 0x41C80000 )
000239 ec88     +LDI R24 , BYTE3 ( 0x41C80000 )
00023a e491     +LDI R25 , BYTE4 ( 0x41C80000 )
                 	__GETD2N 0x41C80000
00023b d55e      	RCALL __SWAPD12
00023c d603      	RCALL __SUBF12
00023d d598      	RCALL __CFD1
00023e 019f      	MOVW R18,R30
                 ; 0000 0065 printf("current temp is %d\n\r", resTemperature);
                +
00023f ece5     +LDI R30 , LOW ( 2 * _0x0 + ( 73 ) )
000240 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 73 ) )
                 	__POINTW1FN _0x0,73
000241 93fa      	ST   -Y,R31
000242 93ea      	ST   -Y,R30
000243 01f9      	MOVW R30,R18
000244 d46f      	RCALL SUBOPT_0x5
000245 e084      	LDI  R24,4
000246 d295      	RCALL _printf
000247 9626      	ADIW R28,6
                 ; 0000 0066 
                 ; 0000 0067 return resTemperature;
000248 01f9      	MOVW R30,R18
000249 c0fc      	RJMP _0x2060005
                 ; 0000 0068 }
                 ; .FEND
                 ;void blinkLED(const int count, const int outputPort) {
                 ; 0000 006B void blinkLED(const int count, const int outputPort) {
                 _blinkLED:
                 ; .FSTART _blinkLED
                 ; 0000 006C int i;
                 ; 0000 006D if(interruptFlag == 1) {
00024a d482      	RCALL SUBOPT_0x8
                 ;	count -> R20,R21
                 ;	outputPort -> R18,R19
                 ;	i -> R16,R17
00024b d486      	RCALL SUBOPT_0x9
00024c f419      	BRNE _0xF
                 ; 0000 006E interruptFlag = 0;
00024d 2433      	CLR  R3
00024e 2444      	CLR  R4
                 ; 0000 006F return;
00024f c2b4      	RJMP _0x2060003
                 ; 0000 0070 }
                 ; 0000 0071 
                 ; 0000 0072 for(i = 0; i < count; i++) {
                 _0xF:
                +
000250 e000     +LDI R16 , LOW ( 0 )
000251 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x11:
                +
000252 1704     +CP R16 , R20
000253 0715     +CPC R17 , R21
                 	__CPWRR 16,17,20,21
000254 f474      	BRGE _0x12
                 ; 0000 0073 PORTD = 0x00;
000255 e0e0      	LDI  R30,LOW(0)
000256 d480      	RCALL SUBOPT_0xA
                 ; 0000 0074 delay_ms(100);
                 ; 0000 0075 PORTD = 1 << outputPort;
000257 2fe2      	MOV  R30,R18
000258 e0a1      	LDI  R26,LOW(1)
000259 d4f1      	RCALL __LSLB12
00025a d47c      	RCALL SUBOPT_0xA
                 ; 0000 0076 delay_ms(100);
                 ; 0000 0077 
                 ; 0000 0078 if(interruptFlag == 1) {
00025b d476      	RCALL SUBOPT_0x9
00025c f419      	BRNE _0x13
                 ; 0000 0079 interruptFlag = 0;
00025d 2433      	CLR  R3
00025e 2444      	CLR  R4
                 ; 0000 007A return;
00025f c2a4      	RJMP _0x2060003
                 ; 0000 007B }
                 ; 0000 007C }
                 _0x13:
                +
000260 5f0f     +SUBI R16 , LOW ( - 1 )
000261 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000262 cfef      	RJMP _0x11
                 _0x12:
                 ; 0000 007D }
000263 c2a0      	RJMP _0x2060003
                 ; .FEND
                 ;int inputMode(int* pt) {
                 ; 0000 007F int inputMode(int* pt) {
                 _inputMode:
                 ; .FSTART _inputMode
                 ; 0000 0080 // printf("---------------------------------------------\n\r");
                 ; 0000 0081 printf("-----------------start input----------------\n\n\n\r");
000264 931a      	ST   -Y,R17
000265 930a      	ST   -Y,R16
000266 018d      	MOVW R16,R26
                 ;	*pt -> R16,R17
                +
000267 edea     +LDI R30 , LOW ( 2 * _0x0 + ( 94 ) )
000268 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 94 ) )
                 	__POINTW1FN _0x0,94
000269 d41e      	RCALL SUBOPT_0x0
                 ; 0000 0082 printf("enter the mode, quit(q) : \n\r");
                +
00026a e0eb     +LDI R30 , LOW ( 2 * _0x0 + ( 143 ) )
00026b e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 143 ) )
                 	__POINTW1FN _0x0,143
00026c d41b      	RCALL SUBOPT_0x0
                 ; 0000 0083 
                 ; 0000 0084 while(scanf("%d", pt) == 1) {
                 _0x14:
00026d d46d      	RCALL SUBOPT_0xB
00026e 01f8      	MOVW R30,R16
00026f 2766      	CLR  R22
000270 2777      	CLR  R23
000271 d523      	RCALL __PUTPARD1
000272 e084      	LDI  R24,4
000273 d3c2      	RCALL _scanf
000274 9626      	ADIW R28,6
000275 30e1      	CPI  R30,LOW(0x1)
000276 e0a0      	LDI  R26,HIGH(0x1)
000277 07fa      	CPC  R31,R26
000278 f499      	BRNE _0x16
                 ; 0000 0085 if(*pt > 4 || *pt < 1) {
000279 01d8      	MOVW R26,R16
00027a 91ed      	LD   R30,X+
00027b 91fd      	LD   R31,X+
00027c 01df      	MOVW R26,R30
00027d 9735      	SBIW R30,5
00027e f41c      	BRGE _0x18
00027f 01fd      	MOVW R30,R26
000280 9731      	SBIW R30,1
000281 f424      	BRGE _0x17
                 _0x18:
                 ; 0000 0086 printf("enter the mode (1 ~ 4) : \n\r");
                +
000282 e2eb     +LDI R30 , LOW ( 2 * _0x0 + ( 175 ) )
000283 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 175 ) )
                 	__POINTW1FN _0x0,175
000284 d403      	RCALL SUBOPT_0x0
                 ; 0000 0087 continue;
000285 cfe7      	RJMP _0x14
                 ; 0000 0088 }
                 ; 0000 0089 printf("\n\n\n--------------end input--------------\n\r");
                 _0x17:
                +
000286 e4e7     +LDI R30 , LOW ( 2 * _0x0 + ( 203 ) )
000287 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 203 ) )
                 	__POINTW1FN _0x0,203
000288 d3ff      	RCALL SUBOPT_0x0
                 ; 0000 008A // printf("---------------------------------------------\n\r");
                 ; 0000 008B return 1;
000289 e0e1      	LDI  R30,LOW(1)
00028a e0f0      	LDI  R31,HIGH(1)
00028b c005      	RJMP _0x2060007
                 ; 0000 008C }
                 _0x16:
                 ; 0000 008D printf("\n\n\n--------------end input--------------\n\r");
                +
00028c e4e7     +LDI R30 , LOW ( 2 * _0x0 + ( 203 ) )
00028d e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 203 ) )
                 	__POINTW1FN _0x0,203
00028e d3f9      	RCALL SUBOPT_0x0
                 ; 0000 008E // printf("---------------------------------------------\n\r");
                 ; 0000 008F return 0;
00028f e0e0      	LDI  R30,LOW(0)
000290 e0f0      	LDI  R31,HIGH(0)
                 _0x2060007:
000291 9109      	LD   R16,Y+
000292 9119      	LD   R17,Y+
000293 9508      	RET
                 ; 0000 0090 }
                 ; .FEND
                 ;int someBehavior(const int mode) {
                 ; 0000 0092 int someBehavior(const int mode) {
                 _someBehavior:
                 ; .FSTART _someBehavior
                 ; 0000 0093 int count, i;
                 ; 0000 0094 if(mode == 1) {
000294 d49c      	RCALL __SAVELOCR6
000295 01ad      	MOVW R20,R26
                 ;	mode -> R20,R21
                 ;	count -> R16,R17
                 ;	i -> R18,R19
000296 e0e1      	LDI  R30,LOW(1)
000297 e0f0      	LDI  R31,HIGH(1)
000298 17e4      	CP   R30,R20
000299 07f5      	CPC  R31,R21
00029a f4e9      	BRNE _0x1A
                 ; 0000 0095 // printf("---------------------------------------------\n\r");
                 ; 0000 0096 printf("--------------start mode1--------------\n\n\n\r");
                +
00029b e7e2     +LDI R30 , LOW ( 2 * _0x0 + ( 246 ) )
00029c e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 246 ) )
                 	__POINTW1FN _0x0,246
00029d d3ea      	RCALL SUBOPT_0x0
                 ; 0000 0097 printf("enter the count for blinking LED, quit(q) : \n\r");
                +
00029e e9ee     +LDI R30 , LOW ( 2 * _0x0 + ( 290 ) )
00029f e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 290 ) )
                 	__POINTW1FN _0x0,290
0002a0 d3e7      	RCALL SUBOPT_0x0
                 ; 0000 0098 if(scanf("%d", &count)) {
0002a1 d439      	RCALL SUBOPT_0xB
0002a2 b7ed      	IN   R30,SPL
0002a3 b7fe      	IN   R31,SPH
0002a4 9731      	SBIW R30,1
0002a5 d4ed      	RCALL __PUTPARD1L
0002a6 931f      	PUSH R17
0002a7 930f      	PUSH R16
0002a8 e084      	LDI  R24,4
0002a9 d38c      	RCALL _scanf
0002aa 9626      	ADIW R28,6
0002ab 910f      	POP  R16
0002ac 911f      	POP  R17
0002ad 9730      	SBIW R30,0
0002ae f029      	BREQ _0x1B
                 ; 0000 0099 blinkLED(count, 7);
0002af 931a      	ST   -Y,R17
0002b0 930a      	ST   -Y,R16
0002b1 e0a7      	LDI  R26,LOW(7)
0002b2 e0b0      	LDI  R27,0
0002b3 df96      	RCALL _blinkLED
                 ; 0000 009A }
                 ; 0000 009B printf("\n\n\n-------------- end mode1 --------------\n\n\n\r");
                 _0x1B:
                +
0002b4 eced     +LDI R30 , LOW ( 2 * _0x0 + ( 337 ) )
0002b5 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 337 ) )
                 	__POINTW1FN _0x0,337
0002b6 d3d1      	RCALL SUBOPT_0x0
                 ; 0000 009C // printf("---------------------------------------------\n\r");
                 ; 0000 009D } else if (mode == 2){
0002b7 c08c      	RJMP _0x1C
                 _0x1A:
0002b8 e0e2      	LDI  R30,LOW(2)
0002b9 e0f0      	LDI  R31,HIGH(2)
0002ba 17e4      	CP   R30,R20
0002bb 07f5      	CPC  R31,R21
0002bc f009      	BREQ PC+2
0002bd c048      	RJMP _0x1D
                 ; 0000 009E int measuredTemperature, sum = 0;
                 ; 0000 009F measureTemperature(8);
0002be 9724      	SBIW R28,4
0002bf e0e0      	LDI  R30,LOW(0)
0002c0 83e8      	ST   Y,R30
0002c1 83e9      	STD  Y+1,R30
                 ;	measuredTemperature -> Y+2
                 ;	sum -> Y+0
0002c2 e0a8      	LDI  R26,LOW(8)
0002c3 df41      	RCALL _measureTemperature
                 ; 0000 00A0 // printf("---------------------------------------------\n\r");
                 ; 0000 00A1 printf("--------------start mode2--------------\n\n\n\r");
                +
0002c4 efec     +LDI R30 , LOW ( 2 * _0x0 + ( 384 ) )
0002c5 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 384 ) )
                 	__POINTW1FN _0x0,384
0002c6 d3c1      	RCALL SUBOPT_0x0
                 ; 0000 00A2 printf("enter the count for measuring temperature, quit(q) : \n\r");
                +
0002c7 e2e8     +LDI R30 , LOW ( 2 * _0x0 + ( 428 ) )
0002c8 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 428 ) )
                 	__POINTW1FN _0x0,428
0002c9 d3be      	RCALL SUBOPT_0x0
                 ; 0000 00A3 if(scanf("%d", &count)) {
0002ca d410      	RCALL SUBOPT_0xB
0002cb b7ed      	IN   R30,SPL
0002cc b7fe      	IN   R31,SPH
0002cd 9731      	SBIW R30,1
0002ce d4c4      	RCALL __PUTPARD1L
0002cf 931f      	PUSH R17
0002d0 930f      	PUSH R16
0002d1 e084      	LDI  R24,4
0002d2 d363      	RCALL _scanf
0002d3 9626      	ADIW R28,6
0002d4 910f      	POP  R16
0002d5 911f      	POP  R17
0002d6 9730      	SBIW R30,0
0002d7 f149      	BREQ _0x1E
                 ; 0000 00A4 int add = 33;
                 ; 0000 00A5 EEPROM_write(add++, count);
0002d8 9722      	SBIW R28,2
0002d9 e2e1      	LDI  R30,LOW(33)
0002da 83e8      	ST   Y,R30
0002db e0e0      	LDI  R30,LOW(0)
0002dc 83e9      	STD  Y+1,R30
                 ;	measuredTemperature -> Y+4
                 ;	sum -> Y+2
                 ;	add -> Y+0
0002dd d402      	RCALL SUBOPT_0xC
0002de 2fa0      	MOV  R26,R16
0002df df0e      	RCALL _EEPROM_write
                 ; 0000 00A6 
                 ; 0000 00A7 for(i = 0; i < count; i++) {
                +
0002e0 e020     +LDI R18 , LOW ( 0 )
0002e1 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x20:
                +
0002e2 1720     +CP R18 , R16
0002e3 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
0002e4 f484      	BRGE _0x21
                 ; 0000 00A8 measuredTemperature = measureTemperature(8);
0002e5 e0a8      	LDI  R26,LOW(8)
0002e6 df1e      	RCALL _measureTemperature
0002e7 83ec      	STD  Y+4,R30
0002e8 83fd      	STD  Y+4+1,R31
                 ; 0000 00A9 sum += measuredTemperature;
0002e9 81aa      	LDD  R26,Y+2
0002ea 81bb      	LDD  R27,Y+2+1
0002eb 0fea      	ADD  R30,R26
0002ec 1ffb      	ADC  R31,R27
0002ed 83ea      	STD  Y+2,R30
0002ee 83fb      	STD  Y+2+1,R31
                 ; 0000 00AA EEPROM_write(add++, (unsigned char)(measuredTemperature));
0002ef d3f0      	RCALL SUBOPT_0xC
0002f0 81ae      	LDD  R26,Y+6
0002f1 defc      	RCALL _EEPROM_write
                 ; 0000 00AB }
                +
0002f2 5f2f     +SUBI R18 , LOW ( - 1 )
0002f3 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002f4 cfed      	RJMP _0x20
                 _0x21:
                 ; 0000 00AC 
                 ; 0000 00AD printf("average of temperatures : %d\n\r", sum / count);
                +
0002f5 e6e0     +LDI R30 , LOW ( 2 * _0x0 + ( 484 ) )
0002f6 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 484 ) )
                 	__POINTW1FN _0x0,484
0002f7 93fa      	ST   -Y,R31
0002f8 93ea      	ST   -Y,R30
0002f9 01f8      	MOVW R30,R16
0002fa 81ac      	LDD  R26,Y+4
0002fb 81bd      	LDD  R27,Y+4+1
0002fc d3b0      	RCALL SUBOPT_0x4
0002fd e084      	LDI  R24,4
0002fe d1dd      	RCALL _printf
0002ff 9626      	ADIW R28,6
                 ; 0000 00AE 
                 ; 0000 00AF }
000300 9622      	ADIW R28,2
                 ; 0000 00B0 printf("\n\n\n-------------- end mode2 --------------\n\n\n\r");
                 _0x1E:
                +
000301 e7ef     +LDI R30 , LOW ( 2 * _0x0 + ( 515 ) )
000302 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 515 ) )
                 	__POINTW1FN _0x0,515
000303 d384      	RCALL SUBOPT_0x0
                 ; 0000 00B1 // printf("---------------------------------------------\n\r");
                 ; 0000 00B2 } else if (mode == 3) {
000304 9624      	ADIW R28,4
000305 c03e      	RJMP _0x22
                 _0x1D:
000306 e0e3      	LDI  R30,LOW(3)
000307 e0f0      	LDI  R31,HIGH(3)
000308 17e4      	CP   R30,R20
000309 07f5      	CPC  R31,R21
00030a f571      	BRNE _0x23
                 ; 0000 00B3 int add = 33;
                 ; 0000 00B4 int count = (int)EEPROM_read(add++);
                 ; 0000 00B5 for(i = 0; i < count; i++) {
00030b 9724      	SBIW R28,4
00030c e2e1      	LDI  R30,LOW(33)
00030d 83ea      	STD  Y+2,R30
00030e e0e0      	LDI  R30,LOW(0)
00030f 83eb      	STD  Y+3,R30
                 ;	add -> Y+2
                 ;	count -> Y+0
000310 81aa      	LDD  R26,Y+2
000311 81bb      	LDD  R27,Y+2+1
000312 9611      	ADIW R26,1
000313 83aa      	STD  Y+2,R26
000314 83bb      	STD  Y+2+1,R27
000315 9711      	SBIW R26,1
000316 dee4      	RCALL _EEPROM_read
000317 e0f0      	LDI  R31,0
000318 83e8      	ST   Y,R30
000319 83f9      	STD  Y+1,R31
                +
00031a e020     +LDI R18 , LOW ( 0 )
00031b e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x25:
00031c 81e8      	LD   R30,Y
00031d 81f9      	LDD  R31,Y+1
00031e 172e      	CP   R18,R30
00031f 073f      	CPC  R19,R31
000320 f4b4      	BRGE _0x26
                 ; 0000 00B6 printf("temp %d : %d\n\r", i + 1, (int)EEPROM_read(add++));
                +
000321 eaee     +LDI R30 , LOW ( 2 * _0x0 + ( 562 ) )
000322 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 562 ) )
                 	__POINTW1FN _0x0,562
000323 93fa      	ST   -Y,R31
000324 93ea      	ST   -Y,R30
000325 01f9      	MOVW R30,R18
000326 9631      	ADIW R30,1
000327 d38c      	RCALL SUBOPT_0x5
000328 85a8      	LDD  R26,Y+8
000329 85b9      	LDD  R27,Y+8+1
00032a 9611      	ADIW R26,1
00032b 87a8      	STD  Y+8,R26
00032c 87b9      	STD  Y+8+1,R27
00032d 9711      	SBIW R26,1
00032e decc      	RCALL _EEPROM_read
00032f e0f0      	LDI  R31,0
000330 d383      	RCALL SUBOPT_0x5
000331 e088      	LDI  R24,8
000332 d1a9      	RCALL _printf
000333 962a      	ADIW R28,10
                 ; 0000 00B7 }
                +
000334 5f2f     +SUBI R18 , LOW ( - 1 )
000335 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000336 cfe5      	RJMP _0x25
                 _0x26:
                 ; 0000 00B8 } else if (mode == 4) {
000337 9624      	ADIW R28,4
000338 c00b      	RJMP _0x27
                 _0x23:
000339 e0e4      	LDI  R30,LOW(4)
00033a e0f0      	LDI  R31,HIGH(4)
00033b 17e4      	CP   R30,R20
00033c 07f5      	CPC  R31,R21
00033d f419      	BRNE _0x28
                 ; 0000 00B9 mearsureVoltage(4);
00033e e0a4      	LDI  R26,LOW(4)
00033f de74      	RCALL _mearsureVoltage
                 ; 0000 00BA } else {
000340 c003      	RJMP _0x29
                 _0x28:
                 ; 0000 00BB return 0;
000341 e0e0      	LDI  R30,LOW(0)
000342 e0f0      	LDI  R31,HIGH(0)
000343 c002      	RJMP _0x2060005
                 ; 0000 00BC }
                 _0x29:
                 _0x27:
                 _0x22:
                 _0x1C:
                 ; 0000 00BD 
                 ; 0000 00BE return 1;
000344 e0e1      	LDI  R30,LOW(1)
000345 e0f0      	LDI  R31,HIGH(1)
                 _0x2060005:
000346 d3f1      	RCALL __LOADLOCR6
                 _0x2060006:
000347 9626      	ADIW R28,6
000348 9508      	RET
                 ; 0000 00BF }
                 ; .FEND
                 ;void main(void) {
                 ; 0000 00C2 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 00C3 int mode;
                 ; 0000 00C4 #asm("sei");
                 ;	mode -> R16,R17
000349 9478      	SEI
                 ; 0000 00C5 #pragma optsize-
                 ; 0000 00C6 CLKPR=(1<<CLKPCE);
00034a e8e0      	LDI  R30,LOW(128)
00034b 93e0 0061 	STS  97,R30
                 ; 0000 00C7 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
00034d e0e0      	LDI  R30,LOW(0)
00034e 93e0 0061 	STS  97,R30
                 ; 0000 00C8 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 00C9 #pragma optsize+
                 ; 0000 00CA #endif
                 ; 0000 00CB 
                 ; 0000 00CC DDRD = (1<<DDD7);
000350 e8e0      	LDI  R30,LOW(128)
000351 b9ea      	OUT  0xA,R30
                 ; 0000 00CD PORTD = (0<<PORTD7);
000352 e0e0      	LDI  R30,LOW(0)
000353 b9eb      	OUT  0xB,R30
                 ; 0000 00CE UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
000354 93e0 00c0 	STS  192,R30
                 ; 0000 00CF UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
000356 e1e8      	LDI  R30,LOW(24)
000357 93e0 00c1 	STS  193,R30
                 ; 0000 00D0 UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
000359 e0e6      	LDI  R30,LOW(6)
00035a 93e0 00c2 	STS  194,R30
                 ; 0000 00D1 UBRR0H=0x00;
00035c e0e0      	LDI  R30,LOW(0)
00035d 93e0 00c5 	STS  197,R30
                 ; 0000 00D2 UBRR0L=0x67;
00035f e6e7      	LDI  R30,LOW(103)
000360 93e0 00c4 	STS  196,R30
                 ; 0000 00D3 
                 ; 0000 00D4 EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000362 e0e0      	LDI  R30,LOW(0)
000363 93e0 0069 	STS  105,R30
                 ; 0000 00D5 EIMSK=(0<<INT1) | (1<<INT0);
000365 e0e1      	LDI  R30,LOW(1)
000366 bbed      	OUT  0x1D,R30
                 ; 0000 00D6 EIFR=(1<<INTF1) | (0<<INTF0);
000367 e0e2      	LDI  R30,LOW(2)
000368 bbec      	OUT  0x1C,R30
                 ; 0000 00D7 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
000369 e0e0      	LDI  R30,LOW(0)
00036a 93e0 0068 	STS  104,R30
                 ; 0000 00D8 
                 ; 0000 00D9 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
00036c e8e4      	LDI  R30,LOW(132)
00036d 93e0 007a 	STS  122,R30
                 ; 0000 00DA ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00036f e0e0      	LDI  R30,LOW(0)
000370 93e0 007b 	STS  123,R30
                 ; 0000 00DB 
                 ; 0000 00DC ACSR=(0<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000372 d34d      	RCALL SUBOPT_0x7
                 ; 0000 00DD DIDR1=(0<<AIN0D) | (0<<AIN1D);
                 ; 0000 00DE ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
                 ; 0000 00DF ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
                 ; 0000 00E0 DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
                 ; 0000 00E1 
                 ; 0000 00E2 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 00E3 delay_ms(100);
000373 e6a4      	LDI  R26,LOW(100)
000374 e0b0      	LDI  R27,0
000375 d5ad      	RCALL _delay_ms
                 ; 0000 00E4 // Start the AD conversion
                 ; 0000 00E5 ADCSRA|=(1<<ADSC);
000376 91e0 007a 	LDS  R30,122
000378 64e0      	ORI  R30,0x40
000379 93e0 007a 	STS  122,R30
                 ; 0000 00E6 // Wait for the AD conversion to complete
                 ; 0000 00E7 while ((ADCSRA & (1<<ADIF))==0);
                 _0x2A:
00037b 91e0 007a 	LDS  R30,122
00037d 71e0      	ANDI R30,LOW(0x10)
00037e f3e1      	BREQ _0x2A
                 ; 0000 00E8 ADCSRA|=(1<<ADIF);
00037f d33a      	RCALL SUBOPT_0x6
                 ; 0000 00E9 
                 ; 0000 00EA blinkLED(2, 7);
000380 e0e2      	LDI  R30,LOW(2)
000381 e0f0      	LDI  R31,HIGH(2)
000382 93fa      	ST   -Y,R31
000383 93ea      	ST   -Y,R30
000384 e0a7      	LDI  R26,LOW(7)
000385 e0b0      	LDI  R27,0
000386 dec3      	RCALL _blinkLED
                 ; 0000 00EB 
                 ; 0000 00EC while (inputMode(&mode)) {
                 _0x2D:
000387 b7ad      	IN   R26,SPL
000388 b7be      	IN   R27,SPH
000389 9711      	SBIW R26,1
00038a 931f      	PUSH R17
00038b 930f      	PUSH R16
00038c ded7      	RCALL _inputMode
00038d 910f      	POP  R16
00038e 911f      	POP  R17
00038f 9730      	SBIW R30,0
000390 f019      	BREQ _0x2F
                 ; 0000 00ED someBehavior(mode);
000391 01d8      	MOVW R26,R16
000392 df01      	RCALL _someBehavior
                 ; 0000 00EE }
000393 cff3      	RJMP _0x2D
                 _0x2F:
                 ; 0000 00EF 
                 ; 0000 00F0 return;
                 _0x30:
000394 cfff      	RJMP _0x30
                 ; 0000 00F1 }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _getchar:
                 ; .FSTART _getchar
                 _0x2000003:
000395 91e0 00c0 	LDS  R30,192
000397 78e0      	ANDI R30,LOW(0x80)
000398 f3e1      	BREQ _0x2000003
000399 91e0 00c6 	LDS  R30,198
00039b 9508      	RET
                 ; .FEND
                 _putchar:
                 ; .FSTART _putchar
00039c 931a      	ST   -Y,R17
00039d 2f1a      	MOV  R17,R26
                 _0x2000006:
00039e 91e0 00c0 	LDS  R30,192
0003a0 72e0      	ANDI R30,LOW(0x20)
0003a1 f3e1      	BREQ _0x2000006
0003a2 9310 00c6 	STS  198,R17
0003a4 9119      	LD   R17,Y+
0003a5 9508      	RET
                 ; .FEND
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
0003a6 d38c      	RCALL __SAVELOCR4
0003a7 018d      	MOVW R16,R26
0003a8 813c      	LDD  R19,Y+4
0003a9 2fa3      	MOV  R26,R19
0003aa dff1      	RCALL _putchar
0003ab 01d8      	MOVW R26,R16
0003ac 91ed      	LD   R30,X+
0003ad 91fd      	LD   R31,X+
0003ae 9631      	ADIW R30,1
0003af 93fe      	ST   -X,R31
0003b0 93ee      	ST   -X,R30
0003b1 d388      	RCALL __LOADLOCR4
                 _0x2060004:
0003b2 9625      	ADIW R28,5
0003b3 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0003b4 93ba      	ST   -Y,R27
0003b5 93aa      	ST   -Y,R26
0003b6 9726      	SBIW R28,6
0003b7 d379      	RCALL __SAVELOCR6
0003b8 e010      	LDI  R17,0
0003b9 85ac      	LDD  R26,Y+12
0003ba 85bd      	LDD  R27,Y+12+1
0003bb e0e0      	LDI  R30,LOW(0)
0003bc e0f0      	LDI  R31,HIGH(0)
0003bd 93ed      	ST   X+,R30
0003be 93fc      	ST   X,R31
                 _0x200001C:
0003bf 89ea      	LDD  R30,Y+18
0003c0 89fb      	LDD  R31,Y+18+1
0003c1 9631      	ADIW R30,1
0003c2 8bea      	STD  Y+18,R30
0003c3 8bfb      	STD  Y+18+1,R31
0003c4 9731      	SBIW R30,1
0003c5 91e4      	LPM  R30,Z
0003c6 2f2e      	MOV  R18,R30
0003c7 30e0      	CPI  R30,0
0003c8 f409      	BRNE PC+2
0003c9 c10b      	RJMP _0x200001E
0003ca 2fe1      	MOV  R30,R17
0003cb 30e0      	CPI  R30,0
0003cc f431      	BRNE _0x2000022
0003cd 3225      	CPI  R18,37
0003ce f411      	BRNE _0x2000023
0003cf e011      	LDI  R17,LOW(1)
0003d0 c001      	RJMP _0x2000024
                 _0x2000023:
0003d1 d317      	RCALL SUBOPT_0xD
                 _0x2000024:
0003d2 c101      	RJMP _0x2000021
                 _0x2000022:
0003d3 30e1      	CPI  R30,LOW(0x1)
0003d4 f4a1      	BRNE _0x2000025
0003d5 3225      	CPI  R18,37
0003d6 f411      	BRNE _0x2000026
0003d7 d311      	RCALL SUBOPT_0xD
0003d8 c0fa      	RJMP _0x20000D2
                 _0x2000026:
0003d9 e012      	LDI  R17,LOW(2)
0003da e040      	LDI  R20,LOW(0)
0003db e000      	LDI  R16,LOW(0)
0003dc 322d      	CPI  R18,45
0003dd f411      	BRNE _0x2000027
0003de e001      	LDI  R16,LOW(1)
0003df c0f4      	RJMP _0x2000021
                 _0x2000027:
0003e0 322b      	CPI  R18,43
0003e1 f411      	BRNE _0x2000028
0003e2 e24b      	LDI  R20,LOW(43)
0003e3 c0f0      	RJMP _0x2000021
                 _0x2000028:
0003e4 3220      	CPI  R18,32
0003e5 f411      	BRNE _0x2000029
0003e6 e240      	LDI  R20,LOW(32)
0003e7 c0ec      	RJMP _0x2000021
                 _0x2000029:
0003e8 c002      	RJMP _0x200002A
                 _0x2000025:
0003e9 30e2      	CPI  R30,LOW(0x2)
0003ea f439      	BRNE _0x200002B
                 _0x200002A:
0003eb e050      	LDI  R21,LOW(0)
0003ec e013      	LDI  R17,LOW(3)
0003ed 3320      	CPI  R18,48
0003ee f411      	BRNE _0x200002C
0003ef 6800      	ORI  R16,LOW(128)
0003f0 c0e3      	RJMP _0x2000021
                 _0x200002C:
0003f1 c003      	RJMP _0x200002D
                 _0x200002B:
0003f2 30e3      	CPI  R30,LOW(0x3)
0003f3 f009      	BREQ PC+2
0003f4 c0df      	RJMP _0x2000021
                 _0x200002D:
0003f5 3320      	CPI  R18,48
0003f6 f010      	BRLO _0x2000030
0003f7 332a      	CPI  R18,58
0003f8 f008      	BRLO _0x2000031
                 _0x2000030:
0003f9 c007      	RJMP _0x200002F
                 _0x2000031:
0003fa e0aa      	LDI  R26,LOW(10)
0003fb 9f5a      	MUL  R21,R26
0003fc 2d50      	MOV  R21,R0
0003fd 2fe2      	MOV  R30,R18
0003fe 53e0      	SUBI R30,LOW(48)
0003ff 0f5e      	ADD  R21,R30
000400 c0d3      	RJMP _0x2000021
                 _0x200002F:
000401 2fe2      	MOV  R30,R18
000402 36e3      	CPI  R30,LOW(0x63)
000403 f439      	BRNE _0x2000035
000404 d2eb      	RCALL SUBOPT_0xE
000405 89e8      	LDD  R30,Y+16
000406 89f9      	LDD  R31,Y+16+1
000407 81a4      	LDD  R26,Z+4
000408 93aa      	ST   -Y,R26
000409 d2ec      	RCALL SUBOPT_0xF
00040a c0c8      	RJMP _0x2000036
                 _0x2000035:
00040b 37e3      	CPI  R30,LOW(0x73)
00040c f429      	BRNE _0x2000038
00040d d2e2      	RCALL SUBOPT_0xE
00040e d2ed      	RCALL SUBOPT_0x10
00040f d25f      	RCALL _strlen
000410 2f1e      	MOV  R17,R30
000411 c007      	RJMP _0x2000039
                 _0x2000038:
000412 37e0      	CPI  R30,LOW(0x70)
000413 f449      	BRNE _0x200003B
000414 d2db      	RCALL SUBOPT_0xE
000415 d2e6      	RCALL SUBOPT_0x10
000416 d264      	RCALL _strlenf
000417 2f1e      	MOV  R17,R30
000418 6008      	ORI  R16,LOW(8)
                 _0x2000039:
000419 6002      	ORI  R16,LOW(2)
00041a 770f      	ANDI R16,LOW(127)
00041b e030      	LDI  R19,LOW(0)
00041c c03a      	RJMP _0x200003C
                 _0x200003B:
00041d 36e4      	CPI  R30,LOW(0x64)
00041e f011      	BREQ _0x200003F
00041f 36e9      	CPI  R30,LOW(0x69)
000420 f411      	BRNE _0x2000040
                 _0x200003F:
000421 6004      	ORI  R16,LOW(4)
000422 c002      	RJMP _0x2000041
                 _0x2000040:
000423 37e5      	CPI  R30,LOW(0x75)
000424 f431      	BRNE _0x2000042
                 _0x2000041:
000425 e6e8      	LDI  R30,LOW(_tbl10_G100*2)
000426 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000427 83ee      	STD  Y+6,R30
000428 83ff      	STD  Y+6+1,R31
000429 e015      	LDI  R17,LOW(5)
00042a c00c      	RJMP _0x2000043
                 _0x2000042:
00042b 35e8      	CPI  R30,LOW(0x58)
00042c f411      	BRNE _0x2000045
00042d 6008      	ORI  R16,LOW(8)
00042e c003      	RJMP _0x2000046
                 _0x2000045:
00042f 37e8      	CPI  R30,LOW(0x78)
000430 f009      	BREQ PC+2
000431 c0a1      	RJMP _0x2000077
                 _0x2000046:
000432 e7e2      	LDI  R30,LOW(_tbl16_G100*2)
000433 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000434 83ee      	STD  Y+6,R30
000435 83ff      	STD  Y+6+1,R31
000436 e014      	LDI  R17,LOW(4)
                 _0x2000043:
000437 ff02      	SBRS R16,2
000438 c015      	RJMP _0x2000048
000439 d2b6      	RCALL SUBOPT_0xE
00043a 89a8      	LDD  R26,Y+16
00043b 89b9      	LDD  R27,Y+16+1
00043c 9614      	ADIW R26,4
00043d 91ed      	LD   R30,X+
00043e 91fd      	LD   R31,X+
00043f 87ea      	STD  Y+10,R30
000440 87fb      	STD  Y+10+1,R31
000441 85ab      	LDD  R26,Y+11
000442 23aa      	TST  R26
000443 f422      	BRPL _0x2000049
000444 d2fa      	RCALL __ANEGW1
000445 87ea      	STD  Y+10,R30
000446 87fb      	STD  Y+10+1,R31
000447 e24d      	LDI  R20,LOW(45)
                 _0x2000049:
000448 3040      	CPI  R20,0
000449 f011      	BREQ _0x200004A
00044a 5f1f      	SUBI R17,-LOW(1)
00044b c001      	RJMP _0x200004B
                 _0x200004A:
00044c 7f0b      	ANDI R16,LOW(251)
                 _0x200004B:
00044d c009      	RJMP _0x200004C
                 _0x2000048:
00044e d2a1      	RCALL SUBOPT_0xE
00044f 89a8      	LDD  R26,Y+16
000450 89b9      	LDD  R27,Y+16+1
000451 9614      	ADIW R26,4
                +
000452 91ed     +LD R30 , X +
000453 91fc     +LD R31 , X
000454 9711     +SBIW R26 , 1
                 	__GETW1P
000455 87ea      	STD  Y+10,R30
000456 87fb      	STD  Y+10+1,R31
                 _0x200004C:
                 _0x200003C:
000457 fd00      	SBRC R16,0
000458 c010      	RJMP _0x200004D
                 _0x200004E:
000459 1715      	CP   R17,R21
00045a f470      	BRSH _0x2000050
00045b ff07      	SBRS R16,7
00045c c008      	RJMP _0x2000051
00045d ff02      	SBRS R16,2
00045e c004      	RJMP _0x2000052
00045f 7f0b      	ANDI R16,LOW(251)
000460 2f24      	MOV  R18,R20
000461 5011      	SUBI R17,LOW(1)
000462 c001      	RJMP _0x2000053
                 _0x2000052:
000463 e320      	LDI  R18,LOW(48)
                 _0x2000053:
000464 c001      	RJMP _0x2000054
                 _0x2000051:
000465 e220      	LDI  R18,LOW(32)
                 _0x2000054:
000466 d282      	RCALL SUBOPT_0xD
000467 5051      	SUBI R21,LOW(1)
000468 cff0      	RJMP _0x200004E
                 _0x2000050:
                 _0x200004D:
000469 2f31      	MOV  R19,R17
00046a ff01      	SBRS R16,1
00046b c016      	RJMP _0x2000055
                 _0x2000056:
00046c 3030      	CPI  R19,0
00046d f099      	BREQ _0x2000058
00046e ff03      	SBRS R16,3
00046f c006      	RJMP _0x2000059
000470 81ee      	LDD  R30,Y+6
000471 81ff      	LDD  R31,Y+6+1
000472 9125      	LPM  R18,Z+
000473 83ee      	STD  Y+6,R30
000474 83ff      	STD  Y+6+1,R31
000475 c005      	RJMP _0x200005A
                 _0x2000059:
000476 81ae      	LDD  R26,Y+6
000477 81bf      	LDD  R27,Y+6+1
000478 912d      	LD   R18,X+
000479 83ae      	STD  Y+6,R26
00047a 83bf      	STD  Y+6+1,R27
                 _0x200005A:
00047b d26d      	RCALL SUBOPT_0xD
00047c 3050      	CPI  R21,0
00047d f009      	BREQ _0x200005B
00047e 5051      	SUBI R21,LOW(1)
                 _0x200005B:
00047f 5031      	SUBI R19,LOW(1)
000480 cfeb      	RJMP _0x2000056
                 _0x2000058:
000481 c048      	RJMP _0x200005C
                 _0x2000055:
                 _0x200005E:
000482 e320      	LDI  R18,LOW(48)
000483 81ee      	LDD  R30,Y+6
000484 81ff      	LDD  R31,Y+6+1
000485 d309      	RCALL __GETW1PF
000486 87e8      	STD  Y+8,R30
000487 87f9      	STD  Y+8+1,R31
000488 81ee      	LDD  R30,Y+6
000489 81ff      	LDD  R31,Y+6+1
00048a 9632      	ADIW R30,2
00048b 83ee      	STD  Y+6,R30
00048c 83ff      	STD  Y+6+1,R31
                 _0x2000060:
00048d 85e8      	LDD  R30,Y+8
00048e 85f9      	LDD  R31,Y+8+1
00048f 85aa      	LDD  R26,Y+10
000490 85bb      	LDD  R27,Y+10+1
000491 17ae      	CP   R26,R30
000492 07bf      	CPC  R27,R31
000493 f050      	BRLO _0x2000062
000494 5f2f      	SUBI R18,-LOW(1)
000495 85a8      	LDD  R26,Y+8
000496 85b9      	LDD  R27,Y+8+1
000497 85ea      	LDD  R30,Y+10
000498 85fb      	LDD  R31,Y+10+1
000499 1bea      	SUB  R30,R26
00049a 0bfb      	SBC  R31,R27
00049b 87ea      	STD  Y+10,R30
00049c 87fb      	STD  Y+10+1,R31
00049d cfef      	RJMP _0x2000060
                 _0x2000062:
00049e 332a      	CPI  R18,58
00049f f028      	BRLO _0x2000063
0004a0 ff03      	SBRS R16,3
0004a1 c002      	RJMP _0x2000064
0004a2 5f29      	SUBI R18,-LOW(7)
0004a3 c001      	RJMP _0x2000065
                 _0x2000064:
0004a4 5d29      	SUBI R18,-LOW(39)
                 _0x2000065:
                 _0x2000063:
0004a5 fd04      	SBRC R16,4
0004a6 c019      	RJMP _0x2000067
0004a7 3321      	CPI  R18,49
0004a8 f420      	BRSH _0x2000069
0004a9 85a8      	LDD  R26,Y+8
0004aa 85b9      	LDD  R27,Y+8+1
0004ab 9711      	SBIW R26,1
0004ac f409      	BRNE _0x2000068
                 _0x2000069:
0004ad c009      	RJMP _0x20000D3
                 _0x2000068:
0004ae 1753      	CP   R21,R19
0004af f010      	BRLO _0x200006D
0004b0 ff00      	SBRS R16,0
0004b1 c001      	RJMP _0x200006E
                 _0x200006D:
0004b2 c011      	RJMP _0x200006C
                 _0x200006E:
0004b3 e220      	LDI  R18,LOW(32)
0004b4 ff07      	SBRS R16,7
0004b5 c00a      	RJMP _0x200006F
0004b6 e320      	LDI  R18,LOW(48)
                 _0x20000D3:
0004b7 6100      	ORI  R16,LOW(16)
0004b8 ff02      	SBRS R16,2
0004b9 c006      	RJMP _0x2000070
0004ba 7f0b      	ANDI R16,LOW(251)
0004bb 934a      	ST   -Y,R20
0004bc d239      	RCALL SUBOPT_0xF
0004bd 3050      	CPI  R21,0
0004be f009      	BREQ _0x2000071
0004bf 5051      	SUBI R21,LOW(1)
                 _0x2000071:
                 _0x2000070:
                 _0x200006F:
                 _0x2000067:
0004c0 d228      	RCALL SUBOPT_0xD
0004c1 3050      	CPI  R21,0
0004c2 f009      	BREQ _0x2000072
0004c3 5051      	SUBI R21,LOW(1)
                 _0x2000072:
                 _0x200006C:
0004c4 5031      	SUBI R19,LOW(1)
0004c5 85a8      	LDD  R26,Y+8
0004c6 85b9      	LDD  R27,Y+8+1
0004c7 9712      	SBIW R26,2
0004c8 f008      	BRLO _0x200005F
0004c9 cfb8      	RJMP _0x200005E
                 _0x200005F:
                 _0x200005C:
0004ca ff00      	SBRS R16,0
0004cb c007      	RJMP _0x2000073
                 _0x2000074:
0004cc 3050      	CPI  R21,0
0004cd f029      	BREQ _0x2000076
0004ce 5051      	SUBI R21,LOW(1)
0004cf e2e0      	LDI  R30,LOW(32)
0004d0 93ea      	ST   -Y,R30
0004d1 d224      	RCALL SUBOPT_0xF
0004d2 cff9      	RJMP _0x2000074
                 _0x2000076:
                 _0x2000073:
                 _0x2000077:
                 _0x2000036:
                 _0x20000D2:
0004d3 e010      	LDI  R17,LOW(0)
                 _0x2000021:
0004d4 ceea      	RJMP _0x200001C
                 _0x200001E:
0004d5 85ac      	LDD  R26,Y+12
0004d6 85bd      	LDD  R27,Y+12+1
0004d7 91ed      	LD   R30,X+
0004d8 91fd      	LD   R31,X+
0004d9 d25e      	RCALL __LOADLOCR6
0004da 9664      	ADIW R28,20
0004db 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
0004dc 92ff      	PUSH R15
0004dd 2ef8      	MOV  R15,R24
0004de 9726      	SBIW R28,6
0004df 931a      	ST   -Y,R17
0004e0 930a      	ST   -Y,R16
0004e1 01de      	MOVW R26,R28
0004e2 9614      	ADIW R26,4
0004e3 d222      	RCALL SUBOPT_0x11
0004e4 83ec      	STD  Y+4,R30
0004e5 83ed      	STD  Y+4+1,R30
0004e6 e0e0      	LDI  R30,LOW(0)
0004e7 83ee      	STD  Y+6,R30
0004e8 83ef      	STD  Y+6+1,R30
0004e9 01de      	MOVW R26,R28
0004ea 9618      	ADIW R26,8
0004eb d220      	RCALL SUBOPT_0x12
0004ec eae6      	LDI  R30,LOW(_put_usart_G100)
0004ed e0f3      	LDI  R31,HIGH(_put_usart_G100)
0004ee d227      	RCALL SUBOPT_0x13
0004ef dec4      	RCALL __print_G100
0004f0 8119      	LDD  R17,Y+1
0004f1 8108      	LDD  R16,Y+0
0004f2 9628      	ADIW R28,8
0004f3 90ff      	POP  R15
0004f4 9508      	RET
                 ; .FEND
                 _get_usart_G100:
                 ; .FSTART _get_usart_G100
0004f5 d1d7      	RCALL SUBOPT_0x8
0004f6 01d9      	MOVW R26,R18
0004f7 e0e0      	LDI  R30,LOW(0)
0004f8 93ec      	ST   X,R30
0004f9 01da      	MOVW R26,R20
0004fa 91ec      	LD   R30,X
0004fb 2f1e      	MOV  R17,R30
0004fc 30e0      	CPI  R30,0
0004fd f019      	BREQ _0x200007E
0004fe e0e0      	LDI  R30,LOW(0)
0004ff 93ec      	ST   X,R30
000500 c002      	RJMP _0x200007F
                 _0x200007E:
000501 de93      	RCALL _getchar
000502 2f1e      	MOV  R17,R30
                 _0x200007F:
000503 2fe1      	MOV  R30,R17
                 _0x2060003:
000504 d233      	RCALL __LOADLOCR6
000505 9628      	ADIW R28,8
000506 9508      	RET
                 ; .FEND
                 __scanf_G100:
                 ; .FSTART __scanf_G100
000507 92ff      	PUSH R15
000508 93ba      	ST   -Y,R27
000509 93aa      	ST   -Y,R26
00050a 9724      	SBIW R28,4
00050b d225      	RCALL __SAVELOCR6
00050c e0e0      	LDI  R30,LOW(0)
00050d e0f0      	LDI  R31,HIGH(0)
00050e 87e8      	STD  Y+8,R30
00050f 87f9      	STD  Y+8+1,R31
000510 2f4e      	MOV  R20,R30
                 _0x2000085:
000511 89e8      	LDD  R30,Y+16
000512 89f9      	LDD  R31,Y+16+1
000513 9631      	ADIW R30,1
000514 8be8      	STD  Y+16,R30
000515 8bf9      	STD  Y+16+1,R31
000516 9731      	SBIW R30,1
000517 91e4      	LPM  R30,Z
000518 2f3e      	MOV  R19,R30
000519 30e0      	CPI  R30,0
00051a f409      	BRNE PC+2
00051b c114      	RJMP _0x2000087
00051c 2fa3      	MOV  R26,R19
00051d d137      	RCALL _isspace
00051e 30e0      	CPI  R30,0
00051f f0b9      	BREQ _0x2000088
                 _0x2000089:
000520 b7ed      	IN   R30,SPL
000521 b7fe      	IN   R31,SPH
000522 93fa      	ST   -Y,R31
000523 93ea      	ST   -Y,R30
000524 934f      	PUSH R20
000525 d1f5      	RCALL SUBOPT_0x14
000526 914f      	POP  R20
000527 2f3e      	MOV  R19,R30
000528 30e0      	CPI  R30,0
000529 f021      	BREQ _0x200008C
00052a 2fa3      	MOV  R26,R19
00052b d129      	RCALL _isspace
00052c 30e0      	CPI  R30,0
00052d f409      	BRNE _0x200008D
                 _0x200008C:
00052e c006      	RJMP _0x200008B
                 _0x200008D:
00052f d1f1      	RCALL SUBOPT_0x15
000530 f41c      	BRGE _0x200008E
000531 efef      	LDI  R30,LOW(65535)
000532 efff      	LDI  R31,HIGH(65535)
000533 c0fe      	RJMP _0x2060001
                 _0x200008E:
000534 cfeb      	RJMP _0x2000089
                 _0x200008B:
000535 2f43      	MOV  R20,R19
000536 c0f8      	RJMP _0x200008F
                 _0x2000088:
000537 3235      	CPI  R19,37
000538 f009      	BREQ PC+2
000539 c0df      	RJMP _0x2000090
00053a e050      	LDI  R21,LOW(0)
                 _0x2000091:
00053b 89e8      	LDD  R30,Y+16
00053c 89f9      	LDD  R31,Y+16+1
00053d 9135      	LPM  R19,Z+
00053e 8be8      	STD  Y+16,R30
00053f 8bf9      	STD  Y+16+1,R31
000540 3330      	CPI  R19,48
000541 f010      	BRLO _0x2000095
000542 333a      	CPI  R19,58
000543 f008      	BRLO _0x2000094
                 _0x2000095:
000544 c007      	RJMP _0x2000093
                 _0x2000094:
000545 e0aa      	LDI  R26,LOW(10)
000546 9f5a      	MUL  R21,R26
000547 2d50      	MOV  R21,R0
000548 2fe3      	MOV  R30,R19
000549 53e0      	SUBI R30,LOW(48)
00054a 0f5e      	ADD  R21,R30
00054b cfef      	RJMP _0x2000091
                 _0x2000093:
00054c 3030      	CPI  R19,0
00054d f409      	BRNE _0x2000097
00054e c0e1      	RJMP _0x2000087
                 _0x2000097:
                 _0x2000098:
00054f b7ed      	IN   R30,SPL
000550 b7fe      	IN   R31,SPH
000551 93fa      	ST   -Y,R31
000552 93ea      	ST   -Y,R30
000553 934f      	PUSH R20
000554 d1c6      	RCALL SUBOPT_0x14
000555 914f      	POP  R20
000556 2f2e      	MOV  R18,R30
000557 2fae      	MOV  R26,R30
000558 d0fc      	RCALL _isspace
000559 30e0      	CPI  R30,0
00055a f031      	BREQ _0x200009A
00055b d1c5      	RCALL SUBOPT_0x15
00055c f41c      	BRGE _0x200009B
00055d efef      	LDI  R30,LOW(65535)
00055e efff      	LDI  R31,HIGH(65535)
00055f c0d2      	RJMP _0x2060001
                 _0x200009B:
000560 cfee      	RJMP _0x2000098
                 _0x200009A:
000561 3020      	CPI  R18,0
000562 f409      	BRNE _0x200009C
000563 c0c3      	RJMP _0x200009D
                 _0x200009C:
000564 2f42      	MOV  R20,R18
000565 3050      	CPI  R21,0
000566 f409      	BRNE _0x200009E
000567 ef5f      	LDI  R21,LOW(255)
                 _0x200009E:
000568 2fe3      	MOV  R30,R19
000569 36e3      	CPI  R30,LOW(0x63)
00056a f481      	BRNE _0x20000A2
00056b d1ba      	RCALL SUBOPT_0x16
00056c b7ed      	IN   R30,SPL
00056d b7fe      	IN   R31,SPH
00056e 93fa      	ST   -Y,R31
00056f 93ea      	ST   -Y,R30
000570 934f      	PUSH R20
000571 d1a9      	RCALL SUBOPT_0x14
000572 914f      	POP  R20
000573 01d8      	MOVW R26,R16
000574 93ec      	ST   X,R30
000575 d1ab      	RCALL SUBOPT_0x15
000576 f41c      	BRGE _0x20000A3
000577 efef      	LDI  R30,LOW(65535)
000578 efff      	LDI  R31,HIGH(65535)
000579 c0b8      	RJMP _0x2060001
                 _0x20000A3:
00057a c098      	RJMP _0x20000A1
                 _0x20000A2:
00057b 37e3      	CPI  R30,LOW(0x73)
00057c f531      	BRNE _0x20000AC
00057d d1a8      	RCALL SUBOPT_0x16
                 _0x20000A5:
00057e 2fe5      	MOV  R30,R21
00057f 5051      	SUBI R21,1
000580 30e0      	CPI  R30,0
000581 f0e9      	BREQ _0x20000A7
000582 b7ed      	IN   R30,SPL
000583 b7fe      	IN   R31,SPH
000584 93fa      	ST   -Y,R31
000585 93ea      	ST   -Y,R30
000586 934f      	PUSH R20
000587 d193      	RCALL SUBOPT_0x14
000588 914f      	POP  R20
000589 2f3e      	MOV  R19,R30
00058a 30e0      	CPI  R30,0
00058b f021      	BREQ _0x20000A9
00058c 2fa3      	MOV  R26,R19
00058d d0c7      	RCALL _isspace
00058e 30e0      	CPI  R30,0
00058f f031      	BREQ _0x20000A8
                 _0x20000A9:
000590 d190      	RCALL SUBOPT_0x15
000591 f41c      	BRGE _0x20000AB
000592 efef      	LDI  R30,LOW(65535)
000593 efff      	LDI  R31,HIGH(65535)
000594 c09d      	RJMP _0x2060001
                 _0x20000AB:
000595 c009      	RJMP _0x20000A7
                 _0x20000A8:
000596 931f      	PUSH R17
000597 930f      	PUSH R16
                +
000598 5f0f     +SUBI R16 , LOW ( - 1 )
000599 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00059a 2fe3      	MOV  R30,R19
00059b 91af      	POP  R26
00059c 91bf      	POP  R27
00059d 93ec      	ST   X,R30
00059e cfdf      	RJMP _0x20000A5
                 _0x20000A7:
00059f 01d8      	MOVW R26,R16
0005a0 e0e0      	LDI  R30,LOW(0)
0005a1 93ec      	ST   X,R30
0005a2 c070      	RJMP _0x20000A1
                 _0x20000AC:
0005a3 9468      	SET
0005a4 f8f1      	BLD  R15,1
0005a5 94e8      	CLT
0005a6 f8f2      	BLD  R15,2
0005a7 2fe3      	MOV  R30,R19
0005a8 36e4      	CPI  R30,LOW(0x64)
0005a9 f011      	BREQ _0x20000B1
0005aa 36e9      	CPI  R30,LOW(0x69)
0005ab f419      	BRNE _0x20000B2
                 _0x20000B1:
0005ac 94e8      	CLT
0005ad f8f1      	BLD  R15,1
0005ae c002      	RJMP _0x20000B3
                 _0x20000B2:
0005af 37e5      	CPI  R30,LOW(0x75)
0005b0 f411      	BRNE _0x20000B4
                 _0x20000B3:
0005b1 e02a      	LDI  R18,LOW(10)
0005b2 c008      	RJMP _0x20000AF
                 _0x20000B4:
0005b3 37e8      	CPI  R30,LOW(0x78)
0005b4 f411      	BRNE _0x20000B5
0005b5 e120      	LDI  R18,LOW(16)
0005b6 c004      	RJMP _0x20000AF
                 _0x20000B5:
0005b7 32e5      	CPI  R30,LOW(0x25)
0005b8 f409      	BRNE _0x20000B8
0005b9 c05f      	RJMP _0x20000B7
                 _0x20000B8:
0005ba c075      	RJMP _0x2060002
                 _0x20000AF:
0005bb e0e0      	LDI  R30,LOW(0)
0005bc 83ee      	STD  Y+6,R30
0005bd 83ef      	STD  Y+6+1,R30
0005be 9468      	SET
0005bf f8f0      	BLD  R15,0
                 _0x20000B9:
0005c0 2fe5      	MOV  R30,R21
0005c1 5051      	SUBI R21,1
0005c2 30e0      	CPI  R30,0
0005c3 f409      	BRNE PC+2
0005c4 c041      	RJMP _0x20000BB
0005c5 b7ed      	IN   R30,SPL
0005c6 b7fe      	IN   R31,SPH
0005c7 93fa      	ST   -Y,R31
0005c8 93ea      	ST   -Y,R30
0005c9 934f      	PUSH R20
0005ca d150      	RCALL SUBOPT_0x14
0005cb 914f      	POP  R20
0005cc 2f3e      	MOV  R19,R30
0005cd 32e1      	CPI  R30,LOW(0x21)
0005ce f430      	BRSH _0x20000BC
0005cf d151      	RCALL SUBOPT_0x15
0005d0 f41c      	BRGE _0x20000BD
0005d1 efef      	LDI  R30,LOW(65535)
0005d2 efff      	LDI  R31,HIGH(65535)
0005d3 c05e      	RJMP _0x2060001
                 _0x20000BD:
0005d4 c015      	RJMP _0x20000BE
                 _0x20000BC:
0005d5 fcf1      	SBRC R15,1
0005d6 c008      	RJMP _0x20000BF
0005d7 9468      	SET
0005d8 f8f1      	BLD  R15,1
0005d9 323d      	CPI  R19,45
0005da f411      	BRNE _0x20000C0
0005db f8f2      	BLD  R15,2
0005dc cfe3      	RJMP _0x20000B9
                 _0x20000C0:
0005dd 323b      	CPI  R19,43
0005de f309      	BREQ _0x20000B9
                 _0x20000BF:
0005df 3120      	CPI  R18,16
0005e0 f429      	BRNE _0x20000C2
0005e1 2fa3      	MOV  R26,R19
0005e2 d07d      	RCALL _isxdigit
0005e3 30e0      	CPI  R30,0
0005e4 f029      	BREQ _0x20000BE
0005e5 c008      	RJMP _0x20000C4
                 _0x20000C2:
0005e6 2fa3      	MOV  R26,R19
0005e7 d064      	RCALL _isdigit
0005e8 30e0      	CPI  R30,0
0005e9 f421      	BRNE _0x20000C5
                 _0x20000BE:
0005ea fcf0      	SBRC R15,0
0005eb c044      	RJMP _0x20000C7
0005ec 2f43      	MOV  R20,R19
0005ed c018      	RJMP _0x20000BB
                 _0x20000C5:
                 _0x20000C4:
0005ee 3631      	CPI  R19,97
0005ef f010      	BRLO _0x20000C8
0005f0 5537      	SUBI R19,LOW(87)
0005f1 c005      	RJMP _0x20000C9
                 _0x20000C8:
0005f2 3431      	CPI  R19,65
0005f3 f010      	BRLO _0x20000CA
0005f4 5337      	SUBI R19,LOW(55)
0005f5 c001      	RJMP _0x20000CB
                 _0x20000CA:
0005f6 5330      	SUBI R19,LOW(48)
                 _0x20000CB:
                 _0x20000C9:
0005f7 2fe2      	MOV  R30,R18
0005f8 81ae      	LDD  R26,Y+6
0005f9 81bf      	LDD  R27,Y+6+1
0005fa e0f0      	LDI  R31,0
0005fb d157      	RCALL __MULW12U
0005fc 01df      	MOVW R26,R30
0005fd 2fe3      	MOV  R30,R19
0005fe e0f0      	LDI  R31,0
0005ff 0fea      	ADD  R30,R26
000600 1ffb      	ADC  R31,R27
000601 83ee      	STD  Y+6,R30
000602 83ff      	STD  Y+6+1,R31
000603 94e8      	CLT
000604 f8f0      	BLD  R15,0
000605 cfba      	RJMP _0x20000B9
                 _0x20000BB:
000606 d11f      	RCALL SUBOPT_0x16
000607 fef2      	SBRS R15,2
000608 c005      	RJMP _0x20000CC
000609 81ee      	LDD  R30,Y+6
00060a 81ff      	LDD  R31,Y+6+1
00060b d133      	RCALL __ANEGW1
00060c 83ee      	STD  Y+6,R30
00060d 83ff      	STD  Y+6+1,R31
                 _0x20000CC:
00060e 81ee      	LDD  R30,Y+6
00060f 81ff      	LDD  R31,Y+6+1
000610 01d8      	MOVW R26,R16
000611 93ed      	ST   X+,R30
000612 93fc      	ST   X,R31
                 _0x20000A1:
000613 85e8      	LDD  R30,Y+8
000614 85f9      	LDD  R31,Y+8+1
000615 9631      	ADIW R30,1
000616 87e8      	STD  Y+8,R30
000617 87f9      	STD  Y+8+1,R31
000618 c016      	RJMP _0x20000CD
                 _0x2000090:
                 _0x20000B7:
000619 b7ed      	IN   R30,SPL
00061a b7fe      	IN   R31,SPH
00061b 93fa      	ST   -Y,R31
00061c 93ea      	ST   -Y,R30
00061d 934f      	PUSH R20
00061e d0fc      	RCALL SUBOPT_0x14
00061f 914f      	POP  R20
000620 17e3      	CP   R30,R19
000621 f069      	BREQ _0x20000CE
000622 d0fe      	RCALL SUBOPT_0x15
000623 f41c      	BRGE _0x20000CF
000624 efef      	LDI  R30,LOW(65535)
000625 efff      	LDI  R31,HIGH(65535)
000626 c00b      	RJMP _0x2060001
                 _0x20000CF:
                 _0x200009D:
000627 85e8      	LDD  R30,Y+8
000628 85f9      	LDD  R31,Y+8+1
000629 9730      	SBIW R30,0
00062a f419      	BRNE _0x20000D0
00062b efef      	LDI  R30,LOW(65535)
00062c efff      	LDI  R31,HIGH(65535)
00062d c004      	RJMP _0x2060001
                 _0x20000D0:
00062e c001      	RJMP _0x2000087
                 _0x20000CE:
                 _0x20000CD:
                 _0x200008F:
00062f cee1      	RJMP _0x2000085
                 _0x2000087:
                 _0x20000C7:
                 _0x2060002:
000630 85e8      	LDD  R30,Y+8
000631 85f9      	LDD  R31,Y+8+1
                 _0x2060001:
000632 d105      	RCALL __LOADLOCR6
000633 9662      	ADIW R28,18
000634 90ff      	POP  R15
000635 9508      	RET
                 ; .FEND
                 _scanf:
                 ; .FSTART _scanf
000636 92ff      	PUSH R15
000637 2ef8      	MOV  R15,R24
000638 9723      	SBIW R28,3
000639 931a      	ST   -Y,R17
00063a 930a      	ST   -Y,R16
00063b 01de      	MOVW R26,R28
00063c 9611      	ADIW R26,1
00063d d0c8      	RCALL SUBOPT_0x11
00063e 83eb      	STD  Y+3,R30
00063f 83ec      	STD  Y+3+1,R30
000640 01de      	MOVW R26,R28
000641 9615      	ADIW R26,5
000642 d0c9      	RCALL SUBOPT_0x12
000643 efe5      	LDI  R30,LOW(_get_usart_G100)
000644 e0f4      	LDI  R31,HIGH(_get_usart_G100)
000645 d0d0      	RCALL SUBOPT_0x13
000646 dec0      	RCALL __scanf_G100
000647 8119      	LDD  R17,Y+1
000648 8108      	LDD  R16,Y+0
000649 9625      	ADIW R28,5
00064a 90ff      	POP  R15
00064b 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _isdigit:
                 ; .FSTART _isdigit
00064c 93aa      	ST   -Y,R26
00064d e0e1          ldi  r30,1
00064e 91f9          ld   r31,y+
00064f 33f0          cpi  r31,'0'
000650 f010          brlo isdigit0
000651 33fa          cpi  r31,'9'+1
000652 f008          brlo isdigit1
                 isdigit0:
000653 27ee          clr  r30
                 isdigit1:
000654 9508          ret
                 ; .FEND
                 _isspace:
                 ; .FSTART _isspace
000655 93aa      	ST   -Y,R26
000656 e0e1          ldi  r30,1
000657 91f9          ld   r31,y+
000658 32f0          cpi  r31,' '
000659 f029          breq isspace1
00065a 30f9          cpi  r31,9
00065b f010          brlo isspace0
00065c 30fe          cpi  r31,13+1
00065d f008          brlo isspace1
                 isspace0:
00065e 27ee          clr  r30
                 isspace1:
00065f 9508          ret
                 ; .FEND
                 _isxdigit:
                 ; .FSTART _isxdigit
000660 93aa      	ST   -Y,R26
000661 e0e1          ldi  r30,1
000662 91f9          ld   r31,y+
000663 53f0          subi r31,0x30
000664 f040          brcs isxdigit0
000665 30fa          cpi  r31,10
000666 f038          brcs isxdigit1
000667 75ff          andi r31,0x5f
000668 50f7          subi r31,7
000669 30fa          cpi  r31,10
00066a f010          brcs isxdigit0
00066b 31f0          cpi  r31,16
00066c f008          brcs isxdigit1
                 isxdigit0:
00066d 27ee          clr  r30
                 isxdigit1:
00066e 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00066f 93ba      	ST   -Y,R27
000670 93aa      	ST   -Y,R26
000671 91a9          ld   r26,y+
000672 91b9          ld   r27,y+
000673 27ee          clr  r30
000674 27ff          clr  r31
                 strlen0:
000675 916d          ld   r22,x+
000676 2366          tst  r22
000677 f011          breq strlen1
000678 9631          adiw r30,1
000679 cffb          rjmp strlen0
                 strlen1:
00067a 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00067b 93ba      	ST   -Y,R27
00067c 93aa      	ST   -Y,R26
00067d 27aa          clr  r26
00067e 27bb          clr  r27
00067f 91e9          ld   r30,y+
000680 91f9          ld   r31,y+
                 strlenf0:
000681 9005      	lpm  r0,z+
000682 2000          tst  r0
000683 f011          breq strlenf1
000684 9611          adiw r26,1
000685 cffb          rjmp strlenf0
                 strlenf1:
000686 01fd          movw r30,r26
000687 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:42 WORDS
                 SUBOPT_0x0:
000688 93fa      	ST   -Y,R31
000689 93ea      	ST   -Y,R30
00068a e080      	LDI  R24,0
00068b de50      	RCALL _printf
00068c 9622      	ADIW R28,2
00068d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
00068e 93e0 007c 	STS  124,R30
                +
000690 e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
000691 958a     +DEC R24
000692 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
000693 91e0 007a 	LDS  R30,122
000695 64e0      	ORI  R30,0x40
000696 93e0 007a 	STS  122,R30
000698 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x2:
000699 91e0 0078 	LDS  R30,120
00069b 91f0 0079 	LDS  R31,120+1
00069d 2766      	CLR  R22
00069e 2777      	CLR  R23
00069f d16d      	RCALL __CDF1
0006a0 01df      	MOVW R26,R30
0006a1 01cb      	MOVW R24,R22
                +
0006a2 e0e0     +LDI R30 , LOW ( 0x44800000 )
0006a3 e0f0     +LDI R31 , HIGH ( 0x44800000 )
0006a4 e860     +LDI R22 , BYTE3 ( 0x44800000 )
0006a5 e474     +LDI R23 , BYTE4 ( 0x44800000 )
                 	__GETD1N 0x44800000
0006a6 d238      	RCALL __DIVF21
0006a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0006a8 d12d      	RCALL __CFD1
0006a9 01df      	MOVW R26,R30
0006aa e6e4      	LDI  R30,LOW(100)
0006ab e0f0      	LDI  R31,HIGH(100)
0006ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0006ad d0c0      	RCALL __DIVW21
                +
0006ae 2f6f     +MOV R22 , R31
0006af 0f66     +ADD R22 , R22
0006b0 0b66     +SBC R22 , R22
0006b1 2f76     +MOV R23 , R22
                 	__CWD1
0006b2 d0e2      	RCALL __PUTPARD1
0006b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x5:
                +
0006b4 2f6f     +MOV R22 , R31
0006b5 0f66     +ADD R22 , R22
0006b6 0b66     +SBC R22 , R22
0006b7 2f76     +MOV R23 , R22
                 	__CWD1
0006b8 d0dc      	RCALL __PUTPARD1
0006b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
0006ba 91e0 007a 	LDS  R30,122
0006bc 61e0      	ORI  R30,0x10
0006bd 93e0 007a 	STS  122,R30
0006bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x7:
0006c0 bfe0      	OUT  0x30,R30
0006c1 e0e0      	LDI  R30,LOW(0)
0006c2 93e0 007f 	STS  127,R30
0006c4 e8e4      	LDI  R30,LOW(132)
0006c5 93e0 007a 	STS  122,R30
0006c7 e0e0      	LDI  R30,LOW(0)
0006c8 93e0 007b 	STS  123,R30
0006ca 93e0 007e 	STS  126,R30
0006cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0006cd d063      	RCALL __SAVELOCR6
0006ce 019d      	MOVW R18,R26
                +
0006cf 814e     +LDD R20 , Y + 6
0006d0 815f     +LDD R21 , Y + 6 + 1
                 	__GETWRS 20,21,6
0006d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0006d2 e0e1      	LDI  R30,LOW(1)
0006d3 e0f0      	LDI  R31,HIGH(1)
0006d4 15e3      	CP   R30,R3
0006d5 05f4      	CPC  R31,R4
0006d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0006d7 b9eb      	OUT  0xB,R30
0006d8 e6a4      	LDI  R26,LOW(100)
0006d9 e0b0      	LDI  R27,0
0006da c248      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xB:
                +
0006db e2e8     +LDI R30 , LOW ( 2 * _0x0 + ( 172 ) )
0006dc e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 172 ) )
                 	__POINTW1FN _0x0,172
0006dd 93fa      	ST   -Y,R31
0006de 93ea      	ST   -Y,R30
0006df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xC:
0006e0 81e8      	LD   R30,Y
0006e1 81f9      	LDD  R31,Y+1
0006e2 9631      	ADIW R30,1
0006e3 83e8      	ST   Y,R30
0006e4 83f9      	STD  Y+1,R31
0006e5 9731      	SBIW R30,1
0006e6 93fa      	ST   -Y,R31
0006e7 93ea      	ST   -Y,R30
0006e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xD:
0006e9 932a      	ST   -Y,R18
0006ea 85ad      	LDD  R26,Y+13
0006eb 85be      	LDD  R27,Y+13+1
0006ec 85ef      	LDD  R30,Y+15
0006ed 89f8      	LDD  R31,Y+15+1
0006ee 9509      	ICALL
0006ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0xE:
0006f0 89e8      	LDD  R30,Y+16
0006f1 89f9      	LDD  R31,Y+16+1
0006f2 9734      	SBIW R30,4
0006f3 8be8      	STD  Y+16,R30
0006f4 8bf9      	STD  Y+16+1,R31
0006f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xF:
0006f6 85ad      	LDD  R26,Y+13
0006f7 85be      	LDD  R27,Y+13+1
0006f8 85ef      	LDD  R30,Y+15
0006f9 89f8      	LDD  R31,Y+15+1
0006fa 9509      	ICALL
0006fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x10:
0006fc 89a8      	LDD  R26,Y+16
0006fd 89b9      	LDD  R27,Y+16+1
0006fe 9614      	ADIW R26,4
0006ff 91ed      	LD   R30,X+
000700 91fd      	LD   R31,X+
000701 83ee      	STD  Y+6,R30
000702 83ff      	STD  Y+6+1,R31
000703 81ae      	LDD  R26,Y+6
000704 81bf      	LDD  R27,Y+6+1
000705 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x11:
                +
000706 2400     +CLR R0
000707 0daf     +ADD R26 , R15
000708 1db0     +ADC R27 , R0
                 	__ADDW2R15
000709 018d      	MOVW R16,R26
00070a e0e0      	LDI  R30,LOW(0)
00070b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x12:
                +
00070c 2400     +CLR R0
00070d 0daf     +ADD R26 , R15
00070e 1db0     +ADC R27 , R0
                 	__ADDW2R15
00070f 91ed      	LD   R30,X+
000710 91fd      	LD   R31,X+
000711 93fa      	ST   -Y,R31
000712 93ea      	ST   -Y,R30
000713 931a      	ST   -Y,R17
000714 930a      	ST   -Y,R16
000715 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000716 93fa      	ST   -Y,R31
000717 93ea      	ST   -Y,R30
000718 01de      	MOVW R26,R28
000719 9618      	ADIW R26,8
00071a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x14:
00071b 85ac      	LDD  R26,Y+12
00071c 85bd      	LDD  R27,Y+12+1
00071d 85ee      	LDD  R30,Y+14
00071e 85ff      	LDD  R31,Y+14+1
00071f 9509      	ICALL
000720 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x15:
000721 85aa      	LDD  R26,Y+10
000722 85bb      	LDD  R27,Y+10+1
000723 91ac      	LD   R26,X
000724 30a0      	CPI  R26,0
000725 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x16:
000726 85ee      	LDD  R30,Y+14
000727 85ff      	LDD  R31,Y+14+1
000728 9734      	SBIW R30,4
000729 87ee      	STD  Y+14,R30
00072a 87ff      	STD  Y+14+1,R31
00072b 85ae      	LDD  R26,Y+14
00072c 85bf      	LDD  R27,Y+14+1
00072d 9614      	ADIW R26,4
00072e 910d      	LD   R16,X+
00072f 911c      	LD   R17,X
000730 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000731 935a      	ST   -Y,R21
                 __SAVELOCR5:
000732 934a      	ST   -Y,R20
                 __SAVELOCR4:
000733 933a      	ST   -Y,R19
                 __SAVELOCR3:
000734 932a      	ST   -Y,R18
                 __SAVELOCR2:
000735 931a      	ST   -Y,R17
000736 930a      	ST   -Y,R16
000737 9508      	RET
                 
                 __LOADLOCR6:
000738 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000739 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00073a 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00073b 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00073c 8119      	LDD  R17,Y+1
00073d 8108      	LD   R16,Y
00073e 9508      	RET
                 
                 __ANEGW1:
00073f 95f1      	NEG  R31
000740 95e1      	NEG  R30
000741 40f0      	SBCI R31,0
000742 9508      	RET
                 
                 __ANEGD1:
000743 95f0      	COM  R31
000744 9560      	COM  R22
000745 9570      	COM  R23
000746 95e1      	NEG  R30
000747 4fff      	SBCI R31,-1
000748 4f6f      	SBCI R22,-1
000749 4f7f      	SBCI R23,-1
00074a 9508      	RET
                 
                 __LSLB12:
00074b 23ee      	TST  R30
00074c 2e0e      	MOV  R0,R30
00074d 2fea      	MOV  R30,R26
00074e f019      	BREQ __LSLB12R
                 __LSLB12L:
00074f 0fee      	LSL  R30
000750 940a      	DEC  R0
000751 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000752 9508      	RET
                 
                 __MULW12:
                 __MULW12U:
000753 9ffa      	MUL  R31,R26
000754 2df0      	MOV  R31,R0
000755 9feb      	MUL  R30,R27
000756 0df0      	ADD  R31,R0
000757 9fea      	MUL  R30,R26
000758 2de0      	MOV  R30,R0
000759 0df1      	ADD  R31,R1
00075a 9508      	RET
                 
                 __DIVW21U:
00075b 2400      	CLR  R0
00075c 2411      	CLR  R1
00075d e190      	LDI  R25,16
                 __DIVW21U1:
00075e 0faa      	LSL  R26
00075f 1fbb      	ROL  R27
000760 1c00      	ROL  R0
000761 1c11      	ROL  R1
000762 1a0e      	SUB  R0,R30
000763 0a1f      	SBC  R1,R31
000764 f418      	BRCC __DIVW21U2
000765 0e0e      	ADD  R0,R30
000766 1e1f      	ADC  R1,R31
000767 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000768 60a1      	SBR  R26,1
                 __DIVW21U3:
000769 959a      	DEC  R25
00076a f799      	BRNE __DIVW21U1
00076b 01fd      	MOVW R30,R26
00076c 01d0      	MOVW R26,R0
00076d 9508      	RET
                 
                 __DIVW21:
00076e d012      	RCALL __CHKSIGNW
00076f dfeb      	RCALL __DIVW21U
000770 f40e      	BRTC __DIVW211
000771 dfcd      	RCALL __ANEGW1
                 __DIVW211:
000772 9508      	RET
                 
                 __MODW21:
000773 94e8      	CLT
000774 ffb7      	SBRS R27,7
000775 c004      	RJMP __MODW211
000776 95b1      	NEG  R27
000777 95a1      	NEG  R26
000778 40b0      	SBCI R27,0
000779 9468      	SET
                 __MODW211:
00077a fdf7      	SBRC R31,7
00077b dfc3      	RCALL __ANEGW1
00077c dfde      	RCALL __DIVW21U
00077d 01fd      	MOVW R30,R26
00077e f40e      	BRTC __MODW212
00077f dfbf      	RCALL __ANEGW1
                 __MODW212:
000780 9508      	RET
                 
                 __CHKSIGNW:
000781 94e8      	CLT
000782 fff7      	SBRS R31,7
000783 c002      	RJMP __CHKSW1
000784 dfba      	RCALL __ANEGW1
000785 9468      	SET
                 __CHKSW1:
000786 ffb7      	SBRS R27,7
000787 c006      	RJMP __CHKSW2
000788 95b1      	NEG  R27
000789 95a1      	NEG  R26
00078a 40b0      	SBCI R27,0
00078b f800      	BLD  R0,0
00078c 9403      	INC  R0
00078d fa00      	BST  R0,0
                 __CHKSW2:
00078e 9508      	RET
                 
                 __GETW1PF:
00078f 9005      	LPM  R0,Z+
000790 91f4      	LPM  R31,Z
000791 2de0      	MOV  R30,R0
000792 9508      	RET
                 
                 __PUTPARD1L:
000793 e060      	LDI  R22,0
000794 e070      	LDI  R23,0
                 __PUTPARD1:
000795 937a      	ST   -Y,R23
000796 936a      	ST   -Y,R22
000797 93fa      	ST   -Y,R31
000798 93ea      	ST   -Y,R30
000799 9508      	RET
                 
                 __SWAPD12:
00079a 2e18      	MOV  R1,R24
00079b 2f86      	MOV  R24,R22
00079c 2d61      	MOV  R22,R1
00079d 2e19      	MOV  R1,R25
00079e 2f97      	MOV  R25,R23
00079f 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0007a0 2e1b      	MOV  R1,R27
0007a1 2fbf      	MOV  R27,R31
0007a2 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0007a3 2e1a      	MOV  R1,R26
0007a4 2fae      	MOV  R26,R30
0007a5 2de1      	MOV  R30,R1
0007a6 9508      	RET
                 
                 __ROUND_REPACK:
0007a7 2355      	TST  R21
0007a8 f442      	BRPL __REPACK
0007a9 3850      	CPI  R21,0x80
0007aa f411      	BRNE __ROUND_REPACK0
0007ab ffe0      	SBRS R30,0
0007ac c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0007ad 9631      	ADIW R30,1
0007ae 1f69      	ADC  R22,R25
0007af 1f79      	ADC  R23,R25
0007b0 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0007b1 e850      	LDI  R21,0x80
0007b2 2757      	EOR  R21,R23
0007b3 f411      	BRNE __REPACK0
0007b4 935f      	PUSH R21
0007b5 c0ca      	RJMP __ZERORES
                 __REPACK0:
0007b6 3f5f      	CPI  R21,0xFF
0007b7 f031      	BREQ __REPACK1
0007b8 0f66      	LSL  R22
0007b9 0c00      	LSL  R0
0007ba 9557      	ROR  R21
0007bb 9567      	ROR  R22
0007bc 2f75      	MOV  R23,R21
0007bd 9508      	RET
                 __REPACK1:
0007be 935f      	PUSH R21
0007bf 2000      	TST  R0
0007c0 f00a      	BRMI __REPACK2
0007c1 c0c9      	RJMP __MAXRES
                 __REPACK2:
0007c2 c0c2      	RJMP __MINRES
                 
                 __UNPACK:
0007c3 e850      	LDI  R21,0x80
0007c4 2e19      	MOV  R1,R25
0007c5 2215      	AND  R1,R21
0007c6 0f88      	LSL  R24
0007c7 1f99      	ROL  R25
0007c8 2795      	EOR  R25,R21
0007c9 0f55      	LSL  R21
0007ca 9587      	ROR  R24
                 
                 __UNPACK1:
0007cb e850      	LDI  R21,0x80
0007cc 2e07      	MOV  R0,R23
0007cd 2205      	AND  R0,R21
0007ce 0f66      	LSL  R22
0007cf 1f77      	ROL  R23
0007d0 2775      	EOR  R23,R21
0007d1 0f55      	LSL  R21
0007d2 9567      	ROR  R22
0007d3 9508      	RET
                 
                 __CFD1U:
0007d4 9468      	SET
0007d5 c001      	RJMP __CFD1U0
                 __CFD1:
0007d6 94e8      	CLT
                 __CFD1U0:
0007d7 935f      	PUSH R21
0007d8 dff2      	RCALL __UNPACK1
0007d9 3870      	CPI  R23,0x80
0007da f018      	BRLO __CFD10
0007db 3f7f      	CPI  R23,0xFF
0007dc f408      	BRCC __CFD10
0007dd c0a2      	RJMP __ZERORES
                 __CFD10:
0007de e156      	LDI  R21,22
0007df 1b57      	SUB  R21,R23
0007e0 f4aa      	BRPL __CFD11
0007e1 9551      	NEG  R21
0007e2 3058      	CPI  R21,8
0007e3 f40e      	BRTC __CFD19
0007e4 3059      	CPI  R21,9
                 __CFD19:
0007e5 f030      	BRLO __CFD17
0007e6 efef      	SER  R30
0007e7 efff      	SER  R31
0007e8 ef6f      	SER  R22
0007e9 e77f      	LDI  R23,0x7F
0007ea f977      	BLD  R23,7
0007eb c01a      	RJMP __CFD15
                 __CFD17:
0007ec 2777      	CLR  R23
0007ed 2355      	TST  R21
0007ee f0b9      	BREQ __CFD15
                 __CFD18:
0007ef 0fee      	LSL  R30
0007f0 1fff      	ROL  R31
0007f1 1f66      	ROL  R22
0007f2 1f77      	ROL  R23
0007f3 955a      	DEC  R21
0007f4 f7d1      	BRNE __CFD18
0007f5 c010      	RJMP __CFD15
                 __CFD11:
0007f6 2777      	CLR  R23
                 __CFD12:
0007f7 3058      	CPI  R21,8
0007f8 f028      	BRLO __CFD13
0007f9 2fef      	MOV  R30,R31
0007fa 2ff6      	MOV  R31,R22
0007fb 2f67      	MOV  R22,R23
0007fc 5058      	SUBI R21,8
0007fd cff9      	RJMP __CFD12
                 __CFD13:
0007fe 2355      	TST  R21
0007ff f031      	BREQ __CFD15
                 __CFD14:
000800 9576      	LSR  R23
000801 9567      	ROR  R22
000802 95f7      	ROR  R31
000803 95e7      	ROR  R30
000804 955a      	DEC  R21
000805 f7d1      	BRNE __CFD14
                 __CFD15:
000806 2000      	TST  R0
000807 f40a      	BRPL __CFD16
000808 df3a      	RCALL __ANEGD1
                 __CFD16:
000809 915f      	POP  R21
00080a 9508      	RET
                 
                 __CDF1U:
00080b 9468      	SET
00080c c001      	RJMP __CDF1U0
                 __CDF1:
00080d 94e8      	CLT
                 __CDF1U0:
00080e 9730      	SBIW R30,0
00080f 4060      	SBCI R22,0
000810 4070      	SBCI R23,0
000811 f0b1      	BREQ __CDF10
000812 2400      	CLR  R0
000813 f026      	BRTS __CDF11
000814 2377      	TST  R23
000815 f412      	BRPL __CDF11
000816 9400      	COM  R0
000817 df2b      	RCALL __ANEGD1
                 __CDF11:
000818 2e17      	MOV  R1,R23
000819 e17e      	LDI  R23,30
00081a 2011      	TST  R1
                 __CDF12:
00081b f032      	BRMI __CDF13
00081c 957a      	DEC  R23
00081d 0fee      	LSL  R30
00081e 1fff      	ROL  R31
00081f 1f66      	ROL  R22
000820 1c11      	ROL  R1
000821 cff9      	RJMP __CDF12
                 __CDF13:
000822 2fef      	MOV  R30,R31
000823 2ff6      	MOV  R31,R22
000824 2d61      	MOV  R22,R1
000825 935f      	PUSH R21
000826 df8a      	RCALL __REPACK
000827 915f      	POP  R21
                 __CDF10:
000828 9508      	RET
                 
                 __SWAPACC:
000829 934f      	PUSH R20
00082a 01af      	MOVW R20,R30
00082b 01fd      	MOVW R30,R26
00082c 01da      	MOVW R26,R20
00082d 01ab      	MOVW R20,R22
00082e 01bc      	MOVW R22,R24
00082f 01ca      	MOVW R24,R20
000830 2d40      	MOV  R20,R0
000831 2c01      	MOV  R0,R1
000832 2e14      	MOV  R1,R20
000833 914f      	POP  R20
000834 9508      	RET
                 
                 __UADD12:
000835 0fea      	ADD  R30,R26
000836 1ffb      	ADC  R31,R27
000837 1f68      	ADC  R22,R24
000838 9508      	RET
                 
                 __NEGMAN1:
000839 95e0      	COM  R30
00083a 95f0      	COM  R31
00083b 9560      	COM  R22
00083c 5fef      	SUBI R30,-1
00083d 4fff      	SBCI R31,-1
00083e 4f6f      	SBCI R22,-1
00083f 9508      	RET
                 
                 __SUBF12:
000840 935f      	PUSH R21
000841 df81      	RCALL __UNPACK
000842 3890      	CPI  R25,0x80
000843 f149      	BREQ __ADDF129
000844 e850      	LDI  R21,0x80
000845 2615      	EOR  R1,R21
                 
                 __ADDF120:
000846 3870      	CPI  R23,0x80
000847 f121      	BREQ __ADDF128
                 __ADDF121:
000848 2f57      	MOV  R21,R23
000849 1b59      	SUB  R21,R25
00084a f12b      	BRVS __ADDF1211
00084b f412      	BRPL __ADDF122
00084c dfdc      	RCALL __SWAPACC
00084d cffa      	RJMP __ADDF121
                 __ADDF122:
00084e 3158      	CPI  R21,24
00084f f018      	BRLO __ADDF123
000850 27aa      	CLR  R26
000851 27bb      	CLR  R27
000852 2788      	CLR  R24
                 __ADDF123:
000853 3058      	CPI  R21,8
000854 f028      	BRLO __ADDF124
000855 2fab      	MOV  R26,R27
000856 2fb8      	MOV  R27,R24
000857 2788      	CLR  R24
000858 5058      	SUBI R21,8
000859 cff9      	RJMP __ADDF123
                 __ADDF124:
00085a 2355      	TST  R21
00085b f029      	BREQ __ADDF126
                 __ADDF125:
00085c 9586      	LSR  R24
00085d 95b7      	ROR  R27
00085e 95a7      	ROR  R26
00085f 955a      	DEC  R21
000860 f7d9      	BRNE __ADDF125
                 __ADDF126:
000861 2d50      	MOV  R21,R0
000862 2551      	EOR  R21,R1
000863 f072      	BRMI __ADDF127
000864 dfd0      	RCALL __UADD12
000865 f438      	BRCC __ADDF129
000866 9567      	ROR  R22
000867 95f7      	ROR  R31
000868 95e7      	ROR  R30
000869 9573      	INC  R23
00086a f413      	BRVC __ADDF129
00086b c01f      	RJMP __MAXRES
                 __ADDF128:
00086c dfbc      	RCALL __SWAPACC
                 __ADDF129:
00086d df43      	RCALL __REPACK
00086e 915f      	POP  R21
00086f 9508      	RET
                 __ADDF1211:
000870 f7d8      	BRCC __ADDF128
000871 cffb      	RJMP __ADDF129
                 __ADDF127:
000872 1bea      	SUB  R30,R26
000873 0bfb      	SBC  R31,R27
000874 0b68      	SBC  R22,R24
000875 f051      	BREQ __ZERORES
000876 f410      	BRCC __ADDF1210
000877 9400      	COM  R0
000878 dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
000879 2366      	TST  R22
00087a f392      	BRMI __ADDF129
00087b 0fee      	LSL  R30
00087c 1fff      	ROL  R31
00087d 1f66      	ROL  R22
00087e 957a      	DEC  R23
00087f f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000880 27ee      	CLR  R30
000881 27ff      	CLR  R31
000882 01bf      	MOVW R22,R30
000883 915f      	POP  R21
000884 9508      	RET
                 
                 __MINRES:
000885 efef      	SER  R30
000886 efff      	SER  R31
000887 e76f      	LDI  R22,0x7F
000888 ef7f      	SER  R23
000889 915f      	POP  R21
00088a 9508      	RET
                 
                 __MAXRES:
00088b efef      	SER  R30
00088c efff      	SER  R31
00088d e76f      	LDI  R22,0x7F
00088e e77f      	LDI  R23,0x7F
00088f 915f      	POP  R21
000890 9508      	RET
                 
                 __MULF12:
000891 935f      	PUSH R21
000892 df30      	RCALL __UNPACK
000893 3870      	CPI  R23,0x80
000894 f359      	BREQ __ZERORES
000895 3890      	CPI  R25,0x80
000896 f349      	BREQ __ZERORES
000897 2401      	EOR  R0,R1
000898 9408      	SEC
000899 1f79      	ADC  R23,R25
00089a f423      	BRVC __MULF124
00089b f324      	BRLT __ZERORES
                 __MULF125:
00089c 2000      	TST  R0
00089d f33a      	BRMI __MINRES
00089e cfec      	RJMP __MAXRES
                 __MULF124:
00089f 920f      	PUSH R0
0008a0 931f      	PUSH R17
0008a1 932f      	PUSH R18
0008a2 933f      	PUSH R19
0008a3 934f      	PUSH R20
0008a4 2711      	CLR  R17
0008a5 2722      	CLR  R18
0008a6 2799      	CLR  R25
0008a7 9f68      	MUL  R22,R24
0008a8 01a0      	MOVW R20,R0
0008a9 9f8f      	MUL  R24,R31
0008aa 2d30      	MOV  R19,R0
0008ab 0d41      	ADD  R20,R1
0008ac 1f59      	ADC  R21,R25
0008ad 9f6b      	MUL  R22,R27
0008ae 0d30      	ADD  R19,R0
0008af 1d41      	ADC  R20,R1
0008b0 1f59      	ADC  R21,R25
0008b1 9f8e      	MUL  R24,R30
0008b2 d027      	RCALL __MULF126
0008b3 9fbf      	MUL  R27,R31
0008b4 d025      	RCALL __MULF126
0008b5 9f6a      	MUL  R22,R26
0008b6 d023      	RCALL __MULF126
0008b7 9fbe      	MUL  R27,R30
0008b8 d01d      	RCALL __MULF127
0008b9 9faf      	MUL  R26,R31
0008ba d01b      	RCALL __MULF127
0008bb 9fae      	MUL  R26,R30
0008bc 0d11      	ADD  R17,R1
0008bd 1f29      	ADC  R18,R25
0008be 1f39      	ADC  R19,R25
0008bf 1f49      	ADC  R20,R25
0008c0 1f59      	ADC  R21,R25
0008c1 2fe3      	MOV  R30,R19
0008c2 2ff4      	MOV  R31,R20
0008c3 2f65      	MOV  R22,R21
0008c4 2f52      	MOV  R21,R18
0008c5 914f      	POP  R20
0008c6 913f      	POP  R19
0008c7 912f      	POP  R18
0008c8 911f      	POP  R17
0008c9 900f      	POP  R0
0008ca 2366      	TST  R22
0008cb f02a      	BRMI __MULF122
0008cc 0f55      	LSL  R21
0008cd 1fee      	ROL  R30
0008ce 1fff      	ROL  R31
0008cf 1f66      	ROL  R22
0008d0 c002      	RJMP __MULF123
                 __MULF122:
0008d1 9573      	INC  R23
0008d2 f24b      	BRVS __MULF125
                 __MULF123:
0008d3 ded3      	RCALL __ROUND_REPACK
0008d4 915f      	POP  R21
0008d5 9508      	RET
                 
                 __MULF127:
0008d6 0d10      	ADD  R17,R0
0008d7 1d21      	ADC  R18,R1
0008d8 1f39      	ADC  R19,R25
0008d9 c002      	RJMP __MULF128
                 __MULF126:
0008da 0d20      	ADD  R18,R0
0008db 1d31      	ADC  R19,R1
                 __MULF128:
0008dc 1f49      	ADC  R20,R25
0008dd 1f59      	ADC  R21,R25
0008de 9508      	RET
                 
                 __DIVF21:
0008df 935f      	PUSH R21
0008e0 dee2      	RCALL __UNPACK
0008e1 3870      	CPI  R23,0x80
0008e2 f421      	BRNE __DIVF210
0008e3 2011      	TST  R1
                 __DIVF211:
0008e4 f40a      	BRPL __DIVF219
0008e5 cf9f      	RJMP __MINRES
                 __DIVF219:
0008e6 cfa4      	RJMP __MAXRES
                 __DIVF210:
0008e7 3890      	CPI  R25,0x80
0008e8 f409      	BRNE __DIVF218
                 __DIVF217:
0008e9 cf96      	RJMP __ZERORES
                 __DIVF218:
0008ea 2401      	EOR  R0,R1
0008eb 9408      	SEC
0008ec 0b97      	SBC  R25,R23
0008ed f41b      	BRVC __DIVF216
0008ee f3d4      	BRLT __DIVF217
0008ef 2000      	TST  R0
0008f0 cff3      	RJMP __DIVF211
                 __DIVF216:
0008f1 2f79      	MOV  R23,R25
0008f2 931f      	PUSH R17
0008f3 932f      	PUSH R18
0008f4 933f      	PUSH R19
0008f5 934f      	PUSH R20
0008f6 2411      	CLR  R1
0008f7 2711      	CLR  R17
0008f8 2722      	CLR  R18
0008f9 2733      	CLR  R19
0008fa 01a9      	MOVW R20,R18
0008fb e290      	LDI  R25,32
                 __DIVF212:
0008fc 17ae      	CP   R26,R30
0008fd 07bf      	CPC  R27,R31
0008fe 0786      	CPC  R24,R22
0008ff 0741      	CPC  R20,R17
000900 f030      	BRLO __DIVF213
000901 1bae      	SUB  R26,R30
000902 0bbf      	SBC  R27,R31
000903 0b86      	SBC  R24,R22
000904 0b41      	SBC  R20,R17
000905 9408      	SEC
000906 c001      	RJMP __DIVF214
                 __DIVF213:
000907 9488      	CLC
                 __DIVF214:
000908 1f55      	ROL  R21
000909 1f22      	ROL  R18
00090a 1f33      	ROL  R19
00090b 1c11      	ROL  R1
00090c 1faa      	ROL  R26
00090d 1fbb      	ROL  R27
00090e 1f88      	ROL  R24
00090f 1f44      	ROL  R20
000910 959a      	DEC  R25
000911 f751      	BRNE __DIVF212
000912 01f9      	MOVW R30,R18
000913 2d61      	MOV  R22,R1
000914 914f      	POP  R20
000915 913f      	POP  R19
000916 912f      	POP  R18
000917 911f      	POP  R17
000918 2366      	TST  R22
000919 f032      	BRMI __DIVF215
00091a 0f55      	LSL  R21
00091b 1fee      	ROL  R30
00091c 1fff      	ROL  R31
00091d 1f66      	ROL  R22
00091e 957a      	DEC  R23
00091f f24b      	BRVS __DIVF217
                 __DIVF215:
000920 de86      	RCALL __ROUND_REPACK
000921 915f      	POP  R21
000922 9508      	RET
                 
                 _delay_ms:
000923 9610      	adiw r26,0
000924 f039      	breq __delay_ms1
                 __delay_ms0:
000925 95a8      	wdr
                +
000926 ea80     +LDI R24 , LOW ( 0xFA0 )
000927 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000928 9701     +SBIW R24 , 1
000929 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00092a 9711      	sbiw r26,1
00092b f7c9      	brne __delay_ms0
                 __delay_ms1:
00092c 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  51 r1 :  37 r2 :   0 r3 :   4 r4 :   4 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:  22 
r16:  65 r17:  64 r18:  62 r19:  59 r20:  55 r21:  96 r22:  77 r23:  53 
r24:  49 r25:  38 r26: 155 r27:  74 r28:  33 r29:   1 r30: 422 r31: 212 
x  :  34 y  : 291 z  :  15 
Registers used: 24 out of 35 (68.6%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  22 add   :  18 
adiw  :  41 and   :   2 andi  :  12 asr   :   0 bclr  :   0 bld   :   9 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   4 break :   0 breq  :  46 
brge  :  11 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  20 
brlt  :   2 brmi  :   7 brne  :  55 brpl  :   7 brsh  :   3 brtc  :   3 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   1 call  :   0 
cbi   :   0 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  37 cls   :   0 clt   :   7 clv   :   0 clz   :   0 com   :   8 
cp    :  13 cpc   :  13 cpi   :  85 cpse  :   0 dec   :  11 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 
in    :  20 inc   :   3 jmp   :  27 ld    :  45 ldd   : 112 ldi   : 240 
lds   :  12 lpm   :  17 lsl   :  13 lsr   :   2 mov   :  95 movw  :  52 
mul   :  14 muls  :   0 mulsu :   0 neg   :   8 nop   :   0 or    :   1 
ori   :  10 out   :  18 pop   :  35 push  :  34 rcall : 174 ret   :  65 
reti  :   1 rjmp  : 141 rol   :  27 ror   :  12 sbc   :  12 sbci  :  14 
sbi   :   3 sbic  :   2 sbis  :   0 sbiw  :  33 sbr   :   1 sbrc  :   5 
sbrs  :  15 sec   :   3 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   7 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 103 std   :  66 sts   :  21 sub   :   7 subi  :  28 swap  :   0 
tst   :  18 wdr   :   1 
Instructions used: 76 out of 116 (65.5%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00125a   4092    606   4698   32768  14.3%
[.dseg] 0x000100 0x000300      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
